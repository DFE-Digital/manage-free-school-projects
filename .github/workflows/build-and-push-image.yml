name: Deploy to environment

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        type: environment
        description: "Choose an environment to deploy to"
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.event.inputs.environment }}

env:
  NODE_VERSION: 20.x

jobs:
  set-env:
    name: Determine environment
    runs-on: ubuntu-22.04
    outputs:
      environment: ${{ steps.var.outputs.environment }}
      branch: ${{ steps.var.outputs.branch }}
      release: ${{ steps.var.outputs.release }}
      checked-out-sha: ${{ steps.var.outputs.checked-out-sha }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - id: var
        run: |
          GIT_REF=${{ github.ref }}
          GIT_BRANCH=${GIT_REF##*/}
          INPUT=${{ github.event.inputs.environment }}
          ENVIRONMENT=${INPUT:-"development"}
          RELEASE=${ENVIRONMENT,,}-`date +%Y-%m-%d`.${{ github.run_number }}
          CHECKED_OUT_SHA="$(git log -1 '--format=format:%H')"
          echo "environment=${ENVIRONMENT,,}" >> $GITHUB_OUTPUT
          echo "branch=$GIT_BRANCH" >> $GITHUB_OUTPUT
          echo "release=${RELEASE}" >> $GITHUB_OUTPUT
          echo "checked-out-sha=${CHECKED_OUT_SHA}" >> $GITHUB_OUTPUT

  deploy-image:
      name: Deploy '${{ needs.set-env.outputs.branch }}' to ${{ needs.set-env.outputs.environment }}
      needs: [ set-env ]
      uses: DFE-Digital/deploy-azure-container-apps-action/.github/workflows/build-push-deploy.yml@v2.1.0
      strategy:
        matrix:
          image: [
            "web",
            "api"
          ]
          include:
            - image: "web"
              aca_name_secret: "AZURE_ACA_NAME"
              tag_prefix: ""
            - image: "api"
              aca_name_secret: "AZURE_API_ACA_NAME"
              tag_prefix: "api-"
      with:
        docker-image-name: 'mfsp-app'
        docker-build-file-name: './Dockerfile.${{ matrix.image }}'
        docker-tag-prefix: ${{ matrix.tag_prefix }}
        environment: ${{ needs.set-env.outputs.environment }}
      secrets:
        azure-acr-credentials: ${{ secrets.ACR_CREDENTIALS }}
        azure-acr-name: ${{ secrets.ACR_NAME }}
        azure-aca-credentials: ${{ secrets.AZURE_ACA_CREDENTIALS }}
        azure-aca-name: ${{ secrets[matrix.aca_name_secret] }}
        azure-aca-resource-group: ${{ secrets.AZURE_ACA_RESOURCE_GROUP }}

  create-tag:
    name: Tag and release
    needs: set-env
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Create tag
        run: |
          git tag ${{ needs.set-env.outputs.release }}
          git push origin ${{ needs.set-env.outputs.release }}

      - name: Create release
        uses: "actions/github-script@v7"
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"
          script: |
            try {
              await github.rest.repos.createRelease({
                draft: ${{ needs.set-env.outputs.environment == 'test' }},
                generate_release_notes: true,
                name: "${{ needs.set-env.outputs.release }}",
                owner: context.repo.owner,
                prerelease: ${{ needs.set-env.outputs.environment == 'test' }},
                repo: context.repo.repo,
                tag_name: "${{ needs.set-env.outputs.release }}",
              });
            } catch (error) {
              core.setFailed(error.message);
            }

  cypress-tests:
    name: Run Cypress Tests
    if: needs.set-env.outputs.environment == 'staging' || needs.set-env.outputs.environment == 'development'
    needs: [ deploy-image, set-env ]
    runs-on: ubuntu-22.04
    environment: ${{ needs.set-env.outputs.environment }}
    defaults:
      run:
        working-directory: Dfe.ManageFreeSchoolProjects/Dfe.ManageFreeSchoolProjects.CypressTests
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Npm install
        run: npm install

      - name: Run cypress
        run: npm run cy:run -- --env username=${{ secrets.USERNAME }},url=${{ secrets.AZURE_WEB_ENDPOINT }},api=${{ secrets.AZURE_API_ENDPOINT }},apiKey=${{ secrets.AZURE_API_KEY }},authKey=${{secrets.CYPRESS_TEST_SECRET}}

      - name: Upload screenshots
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ needs.set-env.outputs.environment }}
          path: Dfe.ManageFreeSchoolProjects/Dfe.ManageFreeSchoolProjects.CypressTests/cypress/screenshots

      - name: Generate report
        if: always()
        run: |
          mkdir mochareports
          npm run generate:html:report

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports-${{ needs.set-env.outputs.environment }}
          path: Dfe.ManageFreeSchoolProjects/Dfe.ManageFreeSchoolProjects.CypressTests/mochareports

      - name: Report results
        if: always()
        run: npm run cy:notify -- --custom-text="Environment ${{ needs.set-env.outputs.environment }}, See more information https://github.com/DFE-Digital/manage-free-schools-projects/actions/runs/${{github.run_id}}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
