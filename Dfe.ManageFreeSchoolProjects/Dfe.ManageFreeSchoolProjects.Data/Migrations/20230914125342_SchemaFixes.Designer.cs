// <auto-generated />
using System;
using Dfe.ManageFreeSchoolProjects.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dfe.ManageFreeSchoolProjects.Data.Migrations
{
    [DbContext(typeof(MfspContext))]
    [Migration("20230914125342_SchemaFixes")]
    partial class SchemaFixes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.BasicNeed", b =>
                {
                    b.Property<string>("FreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Free school name");

                    b.Property<string>("Phase")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PostcodeUsedHere")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Postcode used here");

                    b.Property<string>("PrimaryPlanningAreaCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Primary planning area code");

                    b.Property<string>("PrimaryPlanningAreaName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Primary planning area name");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Project ID");

                    b.Property<string>("SecondaryPlanningAreaCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Secondary planning area code");

                    b.Property<string>("SecondaryPlanningAreaName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Secondary planning area name");

                    b.Property<string>("_201920PrimaryPhaseLocalAreaSSNoPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Primary Phase Local Area S/S No. places");

                    b.Property<string>("_201920PrimaryPhaseLocalAreaSSPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Primary Phase Local Area S/S % places");

                    b.Property<string>("_201920PrimaryPhasePlanningAreaSSNoPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Primary Phase Planning Area S/S No. places");

                    b.Property<string>("_201920PrimaryPhasePlanningAreaSSPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Primary Phase Planning Area S/S % places");

                    b.Property<string>("_201920SecondaryPhaseLocalAreaSSNoPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Secondary Phase Local Area S/S No. places");

                    b.Property<string>("_201920SecondaryPhaseLocalAreaSSPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Secondary Phase Local Area S/S % places");

                    b.Property<string>("_201920SecondaryPhasePlanningAreaSSNoPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Secondary Phase Planning Area S/S No. places");

                    b.Property<string>("_201920SecondaryPhasePlanningAreaSSPlaces")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("2019/20 Secondary Phase Planning Area S/S % places");

                    b.ToTable("Basic_Need", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Br", b =>
                {
                    b.Property<string>("BudgetRecordsAcquisitionCostVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Acquisition cost VAT");

                    b.Property<bool?>("BudgetRecordsAcquisitionManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.Acquisition manual override");

                    b.Property<string>("BudgetRecordsAqusitionRevenue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Aqusition Revenue");

                    b.Property<string>("BudgetRecordsBroadband")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Broadband");

                    b.Property<string>("BudgetRecordsBudgetApprovalProcess")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Budget approval process");

                    b.Property<string>("BudgetRecordsBudgetId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Budget ID");

                    b.Property<string>("BudgetRecordsBudgetStage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Budget stage");

                    b.Property<string>("BudgetRecordsBudgetStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Budget status");

                    b.Property<string>("BudgetRecordsCcfPropertyBudgetUplift")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.CCF property budget uplift");

                    b.Property<string>("BudgetRecordsConstructionAmountIncludingSurveys")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Construction amount , including surveys");

                    b.Property<string>("BudgetRecordsConstructionAmountIncludingSurveysVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Construction amount , including surveys VAT");

                    b.Property<bool?>("BudgetRecordsConstructionManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.Construction manual override");

                    b.Property<string>("BudgetRecordsConstructionRevenue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Construction revenue");

                    b.Property<string>("BudgetRecordsCostOfReInstatementOfTemporaryAccommodation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Cost of re-instatement of temporary accommodation");

                    b.Property<string>("BudgetRecordsCostPerPupil")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Cost Per Pupil");

                    b.Property<string>("BudgetRecordsEfaCapitalRegionalDdApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.EFA Capital Regional DD (approval status)");

                    b.Property<string>("BudgetRecordsEfaCapitalRegionalDdApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.EFA Capital Regional DD (approver name)");

                    b.Property<DateTime?>("BudgetRecordsEfaCapitalRegionalDdDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.EFA Capital Regional DD (decision date)");

                    b.Property<bool?>("BudgetRecordsFfEManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.FF&E manual override");

                    b.Property<string>("BudgetRecordsFinalCarCcfFormLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Budget Records.Final CAR / CCF Form link");

                    b.Property<string>("BudgetRecordsFinalPropertyModelLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Budget Records.Final property model link");

                    b.Property<string>("BudgetRecordsFinalTechnicalFundingAllocationModelLink")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Budget Records.Final technical funding allocation model link");

                    b.Property<string>("BudgetRecordsFixturesFurnitureAndEquipment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Fixtures, Furniture, and Equipment");

                    b.Property<string>("BudgetRecordsFixturesFurnitureAndEquipmentVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Fixtures, Furniture, and Equipment VAT");

                    b.Property<string>("BudgetRecordsFpmuApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FPMU (approval status)");

                    b.Property<string>("BudgetRecordsFpmuApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FPMU (approver name)");

                    b.Property<DateTime?>("BudgetRecordsFpmuDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.FPMU (decision date)");

                    b.Property<string>("BudgetRecordsFscDivisionalDirectorApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FSC Divisional Director (approval status)");

                    b.Property<string>("BudgetRecordsFscDivisionalDirectorApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FSC Divisional Director (approver name)");

                    b.Property<DateTime?>("BudgetRecordsFscDivisionalDirectorDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.FSC Divisional Director (decision date)");

                    b.Property<string>("BudgetRecordsFscHeadOfFinanceApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FSC Head of Finance (approval status)");

                    b.Property<string>("BudgetRecordsFscHeadOfFinanceApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.FSC Head of Finance (approver name)");

                    b.Property<DateTime?>("BudgetRecordsFscHeadOfFinanceDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.FSC Head of Finance (decision date)");

                    b.Property<string>("BudgetRecordsIctActives")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.ICT actives");

                    b.Property<bool?>("BudgetRecordsIctBudgetManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.ICT budget manual override");

                    b.Property<string>("BudgetRecordsIctDecantCost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.ICT decant cost");

                    b.Property<string>("BudgetRecordsIctEquipmentHardware")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.ICT equipment/hardware");

                    b.Property<string>("BudgetRecordsIctPassives")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.ICT passives");

                    b.Property<string>("BudgetRecordsIndependentFinanceReviewerApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Finance Reviewer (approval status)");

                    b.Property<string>("BudgetRecordsIndependentFinanceReviewerApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Finance Reviewer (approver name)");

                    b.Property<DateTime?>("BudgetRecordsIndependentFinanceReviewerDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Independent Finance Reviewer (decision date)");

                    b.Property<string>("BudgetRecordsIndependentPropertyReviewerApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Property Reviewer (approval status)");

                    b.Property<string>("BudgetRecordsIndependentPropertyReviewerApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Property Reviewer (approver name)");

                    b.Property<DateTime?>("BudgetRecordsIndependentPropertyReviewerDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Independent Property Reviewer (decision date)");

                    b.Property<string>("BudgetRecordsIndependentTechnicalCostQsApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Technical & Cost QS (approval status)");

                    b.Property<string>("BudgetRecordsIndependentTechnicalCostQsApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Independent Technical & Cost QS (approver name)");

                    b.Property<DateTime?>("BudgetRecordsIndependentTechnicalCostQsDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Independent Technical & Cost QS (decision date)");

                    b.Property<DateTime?>("BudgetRecordsInflationBaseDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Inflation base date");

                    b.Property<string>("BudgetRecordsLegalFeesConstructionAdviceIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Legal fees - construction advice (Inc VAT)");

                    b.Property<string>("BudgetRecordsLiveBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Live budget");

                    b.Property<string>("BudgetRecordsLocatedInvestmentCommitteeApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Located Investment Committee (approval status)");

                    b.Property<string>("BudgetRecordsLocatedInvestmentCommitteeApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Located Investment Committee (approver name)");

                    b.Property<DateTime?>("BudgetRecordsLocatedInvestmentCommitteeDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Located Investment Committee (decision date)");

                    b.Property<string>("BudgetRecordsMinisterApprovalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Minister (approval status)");

                    b.Property<string>("BudgetRecordsMinisterApproverName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Minister (approver name)");

                    b.Property<DateTime?>("BudgetRecordsMinisterDecisionDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget Records.Minister (decision date)");

                    b.Property<string>("BudgetRecordsNumberOfPupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Number of pupils");

                    b.Property<string>("BudgetRecordsProjectCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Project code");

                    b.Property<string>("BudgetRecordsProjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Project name");

                    b.Property<string>("BudgetRecordsPropertyManagementCosts")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Property management costs");

                    b.Property<bool?>("BudgetRecordsRevenueManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.Revenue manual override");

                    b.Property<string>("BudgetRecordsTechnicalFeesIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Technical fees (inc VAT)");

                    b.Property<string>("BudgetRecordsTechnicalFeesSurveysIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Technical fees - surveys (inc VAT)");

                    b.Property<string>("BudgetRecordsTemporaryConstructionIncludingSurveys")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary construction, including surveys");

                    b.Property<string>("BudgetRecordsTemporaryConstructionIncludingSurveysVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary construction, including surveys - VAT");

                    b.Property<string>("BudgetRecordsTemporarySiteIctPassives")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary site ICT passives");

                    b.Property<bool?>("BudgetRecordsTemporarySiteManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.Temporary site manual override");

                    b.Property<string>("BudgetRecordsTemporarySitesLegalFeesConstructionAdviceIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary sites - legal fees construction advice (inc VAT)");

                    b.Property<string>("BudgetRecordsTemporarySitesTechnicalFeesIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary sites - technical fees (inc VAT)");

                    b.Property<string>("BudgetRecordsTemporarySitesTechnicalFeesSurveysIncVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Temporary sites - technical fees surveys (inc VAT)");

                    b.Property<string>("BudgetRecordsThirdPartyContributions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Third party contributions");

                    b.Property<string>("BudgetRecordsTotalAcquisitionCostExcVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total acquisition cost ( exc VAT )");

                    b.Property<string>("BudgetRecordsTotalAcquisitionLegalFees")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total acquisition legal fees");

                    b.Property<string>("BudgetRecordsTotalCapitalBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total capital budget");

                    b.Property<string>("BudgetRecordsTotalConstructionBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total construction budget");

                    b.Property<string>("BudgetRecordsTotalFfEBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total FF&E budget");

                    b.Property<string>("BudgetRecordsTotalIctBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total ICT budget");

                    b.Property<bool?>("BudgetRecordsTotalManualOverride")
                        .HasColumnType("bit")
                        .HasColumnName("Budget Records.Total manual override");

                    b.Property<string>("BudgetRecordsTotalPropertyBudgetInclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total property budget ( incl VAT)");

                    b.Property<string>("BudgetRecordsTotalPropertyFees")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total property fees");

                    b.Property<string>("BudgetRecordsTotalRevenue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total revenue");

                    b.Property<string>("BudgetRecordsTotalTemporarySitesBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.Total temporary sites budget");

                    b.Property<string>("BudgetRecordsVatOnFees")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.VAT on fees");

                    b.Property<string>("BudgetRecordsWipNotes")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget Records.WIP notes");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("BR", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Bs", b =>
                {
                    b.Property<string>("BudgetSummaryAcquisitionBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Acquisition budget");

                    b.Property<DateTime?>("BudgetSummaryBudgetApprovalDate")
                        .HasColumnType("date")
                        .HasColumnName("Budget summary.Budget approval date");

                    b.Property<string>("BudgetSummaryBudgetApprovalProcess")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Budget approval process");

                    b.Property<string>("BudgetSummaryBudgetStageSummary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Budget stage summary");

                    b.Property<string>("BudgetSummaryCapitalCostTier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Capital cost tier");

                    b.Property<string>("BudgetSummaryConstructionBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Construction budget");

                    b.Property<string>("BudgetSummaryCostPlan1Approved")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Cost Plan 1 approved");

                    b.Property<string>("BudgetSummaryCostPlan2Approved")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Cost Plan 2 approved");

                    b.Property<string>("BudgetSummaryCostsAtPracticalCompletionApproved")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Costs at practical completion approved");

                    b.Property<string>("BudgetSummaryFfEBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.FF&E budget");

                    b.Property<string>("BudgetSummaryFinalAccountsAgreed")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Final accounts agreed");

                    b.Property<string>("BudgetSummaryIctBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.ICT budget");

                    b.Property<string>("BudgetSummaryIsTheLaMakingAFinancialContributionTowardsThisProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Is the LA making a financial contribution towards this project?");

                    b.Property<string>("BudgetSummaryLaContributionType")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Budget summary.LA Contribution type");

                    b.Property<string>("BudgetSummaryOtherContributionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Other contribution type");

                    b.Property<string>("BudgetSummaryPreCarFundingApproved")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Pre CAR funding approved");

                    b.Property<string>("BudgetSummaryPreCarFundingRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Pre CAR funding required");

                    b.Property<string>("BudgetSummaryStoreBudgetRecordName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Store budget record name");

                    b.Property<string>("BudgetSummaryTemporarySiteBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Temporary Site budget");

                    b.Property<string>("BudgetSummaryTotalCapitalBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Total capital budget");

                    b.Property<string>("BudgetSummaryTotalRevenue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Budget summary.Total Revenue");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("BS", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.ConstructData", b =>
                {
                    b.Property<string>("CapitalProjectRag")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Capital Project RAG");

                    b.Property<string>("CapitalProjectRagRatingCommentary")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Capital Project RAG Rating Commentary");

                    b.Property<string>("DateOfHoTSecuredOnTemporaryAccommodationSiteIfRequired")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Date of HoT secured on temporary accommodation site, if required");

                    b.Property<string>("HoTAgreedForSiteForMainSchoolBuildingActual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("HoT Agreed for site for Main School Building (Actual)");

                    b.Property<string>("IsThisTheMainPlanningRecord")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Is this the main planning record?");

                    b.Property<string>("MainSchoolBuildingFirstReadyForOccupationActual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Main School Building first ready for occupation (Actual)");

                    b.Property<string>("MainSchoolBuildingFirstReadyForOccupationForecast")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Main School Building first ready for occupation (Forecast)");

                    b.Property<string>("PlanningDecision")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Planning decision");

                    b.Property<string>("PlanningRisk")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Planning risk");

                    b.Property<string>("PlanningSiteId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Planning Site ID");

                    b.Property<string>("PostcodeOfSite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Postcode of site");

                    b.Property<string>("PracticalCompletionCertificateIssuedDateA")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Practical Completion Certificate issued date (A)");

                    b.Property<string>("ProjectDirector")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project Director");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project ID");

                    b.Property<string>("ProjectManager")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project Manager");

                    b.Property<string>("RegionalHead")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Regional Head");

                    b.Property<string>("SiteId")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site ID");

                    b.Property<string>("SiteIdentifiedForMainSchoolBuildingActual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site identified for main school building (Actual)");

                    b.Property<string>("SiteStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site status");

                    b.Property<string>("TemporaryAccommodationFirstReadyForOccupationActual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Temporary accommodation first ready for occupation (Actual)");

                    b.Property<string>("TemporaryAccommodationFirstReadyForOccupationForecast")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Temporary accommodation first ready for occupation (Forecast)");

                    b.Property<string>("TemporaryRagRating")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Temporary RAG rating");

                    b.Property<string>("TemporaryRagRatingCommentary")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Temporary RAG Rating Commentary");

                    b.Property<string>("TypeOfSite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Site");

                    b.ToTable("constructData", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Construction", b =>
                {
                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<DateTime?>("IctDetailsBroadbandOrdered")
                        .HasColumnType("date")
                        .HasColumnName("ICT Details.Broadband ordered");

                    b.Property<DateTime?>("IctDetailsIctProcurementRouteAgreedWithTrust")
                        .HasColumnType("date")
                        .HasColumnName("ICT Details.ICT procurement route agreed with Trust");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("SiteDetailsAreaOfExistingBuildingsM2PermanentArea")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Site Details.Area of existing buildings m2 : Permanent Area");

                    b.Property<string>("SiteDetailsAreaOfExistingBuildingsM2TemporaryArea")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Site Details.Area of existing buildings m2 : Temporary Area");

                    b.Property<string>("SiteDetailsAreaOfHardStandingM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of hard standing m2");

                    b.Property<string>("SiteDetailsAreaOfMajorRefurbishmentM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of major refurbishment m2");

                    b.Property<string>("SiteDetailsAreaOfMinorRefurbishmentM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of minor refurbishment m2");

                    b.Property<string>("SiteDetailsAreaOfMugaPlayingFieldsM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of MUGA / playing fields m2");

                    b.Property<string>("SiteDetailsAreaOfNewBuildM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of new build m2");

                    b.Property<string>("SiteDetailsAreaOfRefreshM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of refresh m2");

                    b.Property<string>("SiteDetailsAreaOfRefurbishmentM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of refurbishment m2");

                    b.Property<string>("SiteDetailsAreaOfTemporaryAccommodationRequiredM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Area of temporary accommodation required m2");

                    b.Property<string>("SiteDetailsLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site Details.Location");

                    b.Property<string>("SiteDetailsMaximumGrossAreaRequiredM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Maximum gross area required m2");

                    b.Property<string>("SiteDetailsMinimumGrossAreaRequiredM2")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site Details.Minimum gross area required m2");

                    b.Property<string>("SiteDetailsSprinklerInstallationType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site Details.Sprinkler Installation Type");

                    b.Property<string>("SiteDetailsSprinklerType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site Details.Sprinkler Type");

                    b.Property<string>("SiteDetailsSprinklers")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site Details.Sprinklers");

                    b.Property<string>("SiteDetailsTypeOfWorks")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site Details.Type of works");

                    b.HasKey("Rid");

                    b.ToTable("Construction");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Contracts", b =>
                {
                    b.Property<DateTime?>("Contract1stSectionalCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.1st sectional completion (actual)");

                    b.Property<DateTime?>("Contract1stSectionalCompletionForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.1st sectional completion (forecast)");

                    b.Property<DateTime?>("Contract2ndSectionalCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.2nd sectional completion (actual)");

                    b.Property<DateTime?>("Contract2ndSectionalCompletionForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.2nd sectional completion (forecast)");

                    b.Property<DateTime?>("Contract3rdSectionalCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.3rd sectional completion (actual)");

                    b.Property<DateTime?>("Contract3rdSectionalCompletionForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.3rd sectional completion (forecast)");

                    b.Property<string>("ContractAddressOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Address of site");

                    b.Property<DateTime?>("ContractAllWorksCompleteInclStatutoryCertificationIssuedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.All works complete (incl statutory certification issued) (actual)");

                    b.Property<DateTime?>("ContractAllWorksCompleteInclStatutoryCertificationIssuedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.All works complete (incl statutory certification issued) (forecast)");

                    b.Property<string>("ContractAwardOption")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Award Option");

                    b.Property<DateTime?>("ContractBiddersDay")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Bidders Day");

                    b.Property<string>("ContractConstructionSiteOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Construction Site Open");

                    b.Property<string>("ContractContractAwardValueExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract Award value (excl VAT)");

                    b.Property<string>("ContractContractBudgetValueExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract budget value (excl VAT)");

                    b.Property<string>("ContractContractCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract Category");

                    b.Property<string>("ContractContractId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract ID");

                    b.Property<string>("ContractContractNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contract.Contract notes");

                    b.Property<string>("ContractContractProcurementStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract Procurement Status");

                    b.Property<string>("ContractContractReference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract reference");

                    b.Property<string>("ContractContractType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contract Type");

                    b.Property<string>("ContractContractingParty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contracting party");

                    b.Property<string>("ContractContractor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contractor");

                    b.Property<DateTime?>("ContractContractorAppointedSpmPcsaEwaOtherActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor appointed (SPM / PCSA / EWA / Other) (actual)");

                    b.Property<DateTime?>("ContractContractorAppointedSpmPcsaEwaOtherForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor appointed (SPM / PCSA / EWA / Other) (forecast)");

                    b.Property<DateTime?>("ContractContractorSProposalsApprovedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor’s proposals approved (actual)");

                    b.Property<DateTime?>("ContractContractorSProposalsApprovedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor’s proposals approved (forecast)");

                    b.Property<DateTime?>("ContractContractorSProposalsSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor’s proposals submitted (actual)");

                    b.Property<DateTime?>("ContractContractorSProposalsSubmittedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Contractor’s proposals submitted (forecast)");

                    b.Property<string>("ContractContractorWorkingToBepEirsThroughoutDesignConstructionHandover")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Contractor working to BEP & EIRs throughout design, construction & handover?");

                    b.Property<DateTime?>("ContractDateDevelopmentAgreementSigned")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Date Development agreement signed");

                    b.Property<DateTime?>("ContractDateOfClosedContractStatus")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Date of Closed contract status");

                    b.Property<DateTime?>("ContractDateOfSdbcApproval")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Date of SDBC approval");

                    b.Property<DateTime?>("ContractDateOfSdbcSubmission")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Date of SDBC submission");

                    b.Property<string>("ContractDeliveryParty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Delivery party");

                    b.Property<string>("ContractDeliveryPartyIfOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Delivery party - if other");

                    b.Property<string>("ContractEarlyWorksCostsExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Early works costs (excl VAT)");

                    b.Property<string>("ContractEndOfDefectsLiabilityCertificatesLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.End of defects liability certificates link");

                    b.Property<DateTime?>("ContractEnterIntoMainContractActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Enter into main contract (actual)");

                    b.Property<DateTime?>("ContractEnterIntoMainContractForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Enter into main contract (forecast)");

                    b.Property<DateTime?>("ContractExternalTechnicalAdviserAppointedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.External Technical Adviser appointed (actual)");

                    b.Property<DateTime?>("ContractFeasibilityReportApprovedByEsfaActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Feasibility report approved by ESFA (actual)");

                    b.Property<string>("ContractFeasibilityReportLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Feasibility report link");

                    b.Property<DateTime?>("ContractFeasibilityReportSubmittedToEsfaActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Feasibility report submitted to ESFA (actual)");

                    b.Property<DateTime?>("ContractFeasibiltyReportStarted")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Feasibilty report started");

                    b.Property<DateTime?>("ContractFinalAccountsAgreedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Final accounts agreed (actual)");

                    b.Property<DateTime?>("ContractFinalAccountsAgreedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Final accounts agreed (forecast)");

                    b.Property<string>("ContractFinalContractValueExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Final contract value (excl VAT)");

                    b.Property<string>("ContractGifaForActualContractM2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.GIFA for actual contract (m2)");

                    b.Property<string>("ContractHasTheBepBeenReceivedFromTheContractor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Has the BEP been received from the contractor?");

                    b.Property<string>("ContractHaveTheAirsBeenIssued")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Have the AIRs been issued?");

                    b.Property<string>("ContractHaveTheEirsBeenIssued")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Have the EIRs been issued?");

                    b.Property<DateTime?>("ContractHseF10NotificationOfConstructionProjectFormSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.HSE F10 notification of construction project form submitted (actual)");

                    b.Property<string>("ContractId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ContractID");

                    b.Property<string>("ContractIsBimRequiredForTheProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Is BIM required for the project?");

                    b.Property<string>("ContractIsThisThePrincipalConstructionContractForThePermanentSchoolBuilding")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Is this the principal construction contract for the permanent school building?");

                    b.Property<string>("ContractLatestContractValueExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Latest contract value (excl VAT)");

                    b.Property<string>("ContractLinkToApprovedBc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Link to Approved BC");

                    b.Property<string>("ContractLinkToDevelopmentAgreement")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Link to Development agreement");

                    b.Property<DateTime?>("ContractMakingGoodDefectsReinstatementWorksCompleteActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Making good defects / reinstatement works complete (actual)");

                    b.Property<DateTime?>("ContractMakingGoodDefectsReinstatementWorksCompleteForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Making good defects / reinstatement works complete (forecast)");

                    b.Property<string>("ContractModular")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Modular");

                    b.Property<string>("ContractNameOfDeliveryParty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Name of Delivery Party");

                    b.Property<string>("ContractNameOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Name of site");

                    b.Property<DateTime?>("ContractPlannedProgrammeSetWithTa")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Planned programme set with TA");

                    b.Property<string>("ContractPlanningApplicationId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Planning application ID");

                    b.Property<DateTime?>("ContractPlanningApplicationSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Planning application submitted (actual)");

                    b.Property<DateTime?>("ContractPlanningApplicationSubmittedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Planning application submitted (forecast)");

                    b.Property<DateTime?>("ContractPlanningDecisionGrantedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Planning decision granted (actual)");

                    b.Property<DateTime?>("ContractPlanningDecisionGrantedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Planning decision granted (forecast)");

                    b.Property<string>("ContractPostcodeOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Postcode of site");

                    b.Property<DateTime?>("ContractPracticalCompletionCertificateIssuedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Practical completion certificate issued (actual)");

                    b.Property<DateTime?>("ContractPracticalCompletionCertificateIssuedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Practical completion certificate issued (forecast)");

                    b.Property<string>("ContractPracticalCompletionCertificateLink")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Contract.Practical completion certificate link");

                    b.Property<string>("ContractPrincipalDesigner")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Principal designer");

                    b.Property<string>("ContractProcurementOption")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Procurement Option");

                    b.Property<string>("ContractProcurementRoute")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Procurement route");

                    b.Property<DateTime?>("ContractProcurementStartTenderIssuedActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Procurement start / Tender Issued (actual)");

                    b.Property<DateTime?>("ContractProcurementStartTenderIssuedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Procurement start / Tender Issued (forecast)");

                    b.Property<string>("ContractProportionOfNewBuild")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Proportion of New Build");

                    b.Property<string>("ContractRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.RAG rating");

                    b.Property<string>("ContractReasonForClosedContractStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Reason for Closed contract status");

                    b.Property<string>("ContractSectionalCompletionCertificatesLink")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Contract.Sectional completion certificates link");

                    b.Property<string>("ContractSiteId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Site ID");

                    b.Property<DateTime?>("ContractSiteVisit")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Site Visit");

                    b.Property<DateTime?>("ContractStartOnSiteActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Start on site (actual)");

                    b.Property<DateTime?>("ContractStartOnSiteForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Start on site (forecast)");

                    b.Property<DateTime?>("ContractTenderReportApprovedByEfaActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Tender report approved by EFA (actual)");

                    b.Property<DateTime?>("ContractTenderReportApprovedByEfaForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Tender report approved by EFA (forecast)");

                    b.Property<string>("ContractTenderReportLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Tender report link");

                    b.Property<DateTime?>("ContractTenderReportSubmittedToEfaActual")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Tender report submitted to EFA (actual)");

                    b.Property<DateTime?>("ContractTenderReportSubmittedToEfaForecast")
                        .HasColumnType("date")
                        .HasColumnName("Contract.Tender report submitted to EFA (forecast)");

                    b.Property<string>("ContractTypeOfContractorAppointment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Type of contractor appointment");

                    b.Property<string>("ContractTypeOfContractorAppointmentIfOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Type of contractor appointment if other");

                    b.Property<string>("ContractTypeOfWorks")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contract.Type of works");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Fal", b =>
                {
                    b.Property<DateTime?>("FundingApprovalLettersFundingApprovalLetterIssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("Funding Approval Letters.Funding approval letter issued date");

                    b.Property<string>("FundingApprovalLettersFundingApprovalLetterRecipient")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Funding approval letter recipient");

                    b.Property<string>("FundingApprovalLettersFundingApprovalLetterTotalValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Funding approval letter Total value");

                    b.Property<string>("FundingApprovalLettersId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.ID");

                    b.Property<string>("FundingApprovalLettersLinkToFundingApprovalLetter")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Link to funding approval letter");

                    b.Property<string>("FundingApprovalLettersTotalConstruction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Total construction");

                    b.Property<string>("FundingApprovalLettersTotalFfEBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Total FF&E budget");

                    b.Property<string>("FundingApprovalLettersTotalIctBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Total ICT budget");

                    b.Property<string>("FundingApprovalLettersTotalTemporarySiteBudget")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Funding Approval Letters.Total temporary site budget");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("FAL", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.FsKim", b =>
                {
                    b.Property<string>("GeneralDetailsAcademyLaestab")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Academy LAESTAB");

                    b.Property<string>("GeneralDetailsAcademyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Academy Name");

                    b.Property<string>("GeneralDetailsAcademyStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Academy Status");

                    b.Property<string>("GeneralDetailsAcademyUkprn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("General Details.Academy UKPRN");

                    b.Property<string>("GeneralDetailsAcademyUrn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Academy URN");

                    b.Property<string>("GeneralDetailsLaestab")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.LAESTAB");

                    b.Property<string>("GeneralDetailsLocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Local Authority");

                    b.Property<string>("GeneralDetailsPhase")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Phase");

                    b.Property<string>("GeneralDetailsProjectName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Project Name");

                    b.Property<string>("GeneralDetailsProjectStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Project status");

                    b.Property<DateTime?>("GeneralDetailsReBrokeredDate")
                        .HasColumnType("date")
                        .HasColumnName("General Details.Re-brokered date");

                    b.Property<string>("GeneralDetailsRouteOfProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.Route of Project");

                    b.Property<string>("GeneralDetailsRscRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.RSC Region");

                    b.Property<string>("GeneralDetailsUrn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("General Details.URN");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("ReBrokerageStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Re-brokerage status");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("FS_KIM", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Kai", b =>
                {
                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("ApplicationDetailsAnyOtherFreedomsTheSchoolIntendsToUse")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Any other freedoms the school intends to use");

                    b.Property<string>("ApplicationDetailsAreAnyMembersOfTheGroupAlsoInvolvedInOtherApplicationsToOpenFreeSchoolsInThisRound")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Are any members of the group also involved in other applications to open free schools in this round?");

                    b.Property<string>("ApplicationDetailsAreThereAnyConnectionsWithOtherOrganisationsWithinTheUkOrOverseas")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Are there any connections with other organisations within the UK or overseas?");

                    b.Property<string>("ApplicationDetailsAreThereAnyConnectionsWithReligiousOrganisationsOrInstitutions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Are there any connections with religious organisations or institutions?");

                    b.Property<string>("ApplicationDetailsCompanyAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Company address");

                    b.Property<string>("ApplicationDetailsCompanyName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Company name");

                    b.Property<string>("ApplicationDetailsCompanyRegistrationNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Company registration number");

                    b.Property<DateTime?>("ApplicationDetailsDateLaDecisionExpected")
                        .HasColumnType("date")
                        .HasColumnName("Application Details.Date LA decision expected");

                    b.Property<DateTime?>("ApplicationDetailsDateProposalsExpected")
                        .HasColumnType("date")
                        .HasColumnName("Application Details.Date proposals expected");

                    b.Property<DateTime?>("ApplicationDetailsDateSpecificationIssuedByLa")
                        .HasColumnType("date")
                        .HasColumnName("Application Details.Date specification issued by LA");

                    b.Property<DateTime?>("ApplicationDetailsDateWhenCompanyWasIncorporated")
                        .HasColumnType("date")
                        .HasColumnName("Application Details.Date when company was incorporated");

                    b.Property<string>("ApplicationDetailsDetailsOfAnyConnectionsWithReligiousOrganisationsOrInstitutions")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Details of any connections with religious organisations or institutions");

                    b.Property<string>("ApplicationDetailsDetailsOfConnectionsWithOrganisationsWithinTheUkOrOverseas")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Details of connections with organisations within the UK or overseas");

                    b.Property<string>("ApplicationDetailsDidTheProposerGroupHaveHelpAndSupportFromAnotherCompanyOrOrganisation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Did the proposer group have help and support from another company or organisation?");

                    b.Property<string>("ApplicationDetailsDidTheProposerGroupSeekHelpAndSupportFromTheNewSchoolsNetwork")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Did the proposer group seek help and support from the New Schools Network?");

                    b.Property<string>("ApplicationDetailsDoesTheGroupRunASchoolInTheLocalArea")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Does the group run a school in the local area?");

                    b.Property<string>("ApplicationDetailsDoesTheGroupRunASchoolOfTheSamePhaseAndType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Does the group run a school of the same phase and type?");

                    b.Property<string>("ApplicationDetailsForIndependentSchoolsLinkToTheMostRecentInspectionReport")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.For independent schools, link to the most recent inspection report");

                    b.Property<string>("ApplicationDetailsForIndependentSchoolsNameRatingAndUniqueReferenceNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.For independent schools, name, rating and unique reference number");

                    b.Property<string>("ApplicationDetailsHasTheGroupAppliedBeforeToOpenThisSchoolWhetherUnderTheCurrentNameOrAnotherName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Has the group  applied before to open this school, whether under the current name or another name?");

                    b.Property<string>("ApplicationDetailsHasThePrincipalDesignateBeenIdentified")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Has the principal designate been identified?");

                    b.Property<string>("ApplicationDetailsHasTheProposerGroupEstablishedATrustInAccordanceWithTheDfEModelArticlesOfAssociation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Has the proposer group established a trust in accordance with the DfE model articles of association?");

                    b.Property<string>("ApplicationDetailsHowDoesTheProposerDescribeTheirGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.How does the proposer describe their group?");

                    b.Property<string>("ApplicationDetailsHowManyApplicationsIsTheProposerGroupSeekingToOpenInThisApplicationRound")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.How many applications is the proposer group seeking to open in this application round?");

                    b.Property<string>("ApplicationDetailsIfANurseryIsProposedPleaseStatePupilCapacity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.If a nursery is proposed, please state pupil capacity");

                    b.Property<string>("ApplicationDetailsIfANurseryIsProposedPleaseStateTheAgeRange")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.If a nursery is proposed, please state the age range");

                    b.Property<string>("ApplicationDetailsIfANurseryIsProposedStateNurseryPupilCapacityAndAgeRange")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.If a nursery is proposed, state nursery pupil capacity and age range");

                    b.Property<string>("ApplicationDetailsIfASixthFormIsProposedPleaseStateTheSixthFormPupilCapacity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.If a sixth form is proposed, please state the sixth form pupil capacity");

                    b.Property<string>("ApplicationDetailsIfTheTrustRunsAcademiesFreeSchoolsHasAnythingChangedInTheTrustWithinTheLastMonth")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.If the trust runs academies/free schools, has anything changed in the trust within the last month?");

                    b.Property<string>("ApplicationDetailsIfYesAndTheNameOfTheSchoolWasDifferentStateWhatTheOriginalNameWas")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.If yes and the name of the school was different, state what the original name was:");

                    b.Property<string>("ApplicationDetailsIfYesStateTheNamesSOfTheOrganisationsSAndDescribeTheirRole")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.If yes, state the names (s) of the organisations(s) and describe their role");

                    b.Property<string>("ApplicationDetailsIfYesWhenDidTheGroupLastApply")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.If yes, when did the group last apply?");

                    b.Property<string>("ApplicationDetailsInWhichLocalAuthorityDistrictIsYourPreferredLocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.In which local authority district is your preferred location?");

                    b.Property<string>("ApplicationDetailsIsAnyoneConnectedWithThisApplicationRelatedInAnyWay")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Is anyone connected with this application related in any way?");

                    b.Property<string>("ApplicationDetailsIsTheProposalADirectResultOfARequestFromGroups")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Is the proposal a direct result of a request from groups");

                    b.Property<string>("ApplicationDetailsIsTheProposerGroupPlanningToContractTheManagementOfTheSchoolToAnotherOrganisation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Is the proposer group planning to contract the management of the school to another organisation?");

                    b.Property<DateTime?>("ApplicationDetailsLaClosingDateForReceiptOfProposals")
                        .HasColumnType("date")
                        .HasColumnName("Application Details.LA closing date for receipt of proposals");

                    b.Property<string>("ApplicationDetailsLinkToPreRegistration")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Link to pre-registration");

                    b.Property<string>("ApplicationDetailsLinkToSpecification")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Link to specification");

                    b.Property<string>("ApplicationDetailsMaximumCapacityOfTheFreeSchoolIncluding1619SixthFormButNotIncludingNursery")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Maximum capacity of the free school (including 16-19/sixth form, but not including nursery)");

                    b.Property<string>("ApplicationDetailsNamesAndUniqueReferenceNumberSForEachOfTheTrustSOpenSchools")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Names and unique reference number(s) for each of the trust's open schools");

                    b.Property<string>("ApplicationDetailsNumberOfCompanyMembers")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Number of company members");

                    b.Property<string>("ApplicationDetailsNumberOfTrustees")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Number of trustees");

                    b.Property<string>("ApplicationDetailsProposalsReceived")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Proposals received");

                    b.Property<string>("ApplicationDetailsProposedChairOfTrustees")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Proposed chair of trustees");

                    b.Property<string>("ApplicationDetailsStateYearTheSchoolWillHaveTheOpeningAndPanNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.State year the school will have the opening and PAN number");

                    b.Property<string>("ApplicationDetailsTimeDedicatedToFaithStudiesHoursPerWeek")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Time dedicated to faith studies (hours per week)");

                    b.Property<string>("ApplicationDetailsTimeDedicatedToMinorityLanguageStudyHoursPerWeek")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Time dedicated to minority language study (hours per week)");

                    b.Property<string>("ApplicationDetailsWillTheSchoolAdoptNonStandardTermsAndConditionsForTeachers")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Will the school adopt non-standard terms and conditions for teachers?");

                    b.Property<string>("ApplicationDetailsWillTheSchoolAdoptTheNationalCurriculum")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Will the school adopt the national curriculum?");

                    b.Property<string>("ApplicationDetailsWillTheSchoolEmployTeachersWithoutQualifiedTeacherStatusQts")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Will the school employ teachers without qualified teacher status (QTS)?");

                    b.Property<string>("ApplicationDetailsWillTheSchoolHaveADistinctivePedagogyOrEducationalPhilosophyForExampleSteinerOrMontessori")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Application Details.Will the school have a distinctive pedagogy or educational philosophy, for example Steiner or Montessori?");

                    b.Property<string>("ApplicationDetailsWillTheSchoolOperateANonStandardSchoolDay")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Will the school operate a non-standard school day?");

                    b.Property<string>("ApplicationDetailsWillTheSchoolOperateANonStandardSchoolYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Application Details.Will the school operate a non-standard school year?");

                    b.Property<string>("AssessmentCriteriaAreYouRecommendingApprovalOfThe1619Element")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Criteria.Are you recommending approval of the 16-19 element?");

                    b.Property<string>("AssessmentCriteriaConditions")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Assessment Criteria.Conditions");

                    b.Property<string>("AssessmentCriteriaFinalRecommendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Criteria.Final recommendation");

                    b.Property<string>("AssessmentCriteriaFinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Criteria.Final Score");

                    b.Property<string>("AssessmentCriteriaNurseryRecommendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Criteria.Nursery recommendation");

                    b.Property<string>("AssessmentCriteriaNurseryRecommendationCommentary")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Assessment Criteria.Nursery recommendation commentary");

                    b.Property<string>("AssessmentCriteriaRecommendationCommentary")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Assessment Criteria.Recommendation commentary");

                    b.Property<DateTime?>("AssessmentDetailsDateOfLaFsPresumptionAssessment")
                        .HasColumnType("date")
                        .HasColumnName("Assessment Details.Date of LA FS presumption assessment");

                    b.Property<DateTime?>("AssessmentDetailsDateOfRscHtbPresumptionDecisionMeeting")
                        .HasColumnType("date")
                        .HasColumnName("Assessment Details.Date of RSC/HTB presumption decision meeting");

                    b.Property<string>("AssessmentDetailsDfERepresentationOnFsPresumptionPanel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.DfE representation on FS presumption panel?");

                    b.Property<string>("AssessmentDetailsEqualitiesImpactAssessment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Assessment Details.Equalities impact assessment");

                    b.Property<string>("AssessmentDetailsInterviewAttendees")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Assessment Details.Interview Attendees");

                    b.Property<string>("AssessmentDetailsInterviewPanel")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Assessment Details.Interview panel");

                    b.Property<string>("AssessmentDetailsMinisterialPostInterviewDecision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Ministerial post-interview decision");

                    b.Property<string>("AssessmentDetailsMinisterialPostPaperDecision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Ministerial post-paper decision");

                    b.Property<string>("AssessmentDetailsNameOfDfEIndividualSOnFsPresumptionAssessmentPanel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Name of DfE individual(s) on FS presumption assessment panel");

                    b.Property<string>("AssessmentDetailsPostInterviewRecommendationToTheMinister")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Post-interview recommendation to the Minister");

                    b.Property<string>("AssessmentDetailsPostPaperRecommendationToTheMinister")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Post-paper recommendation to the Minister");

                    b.Property<string>("AssessmentDetailsRscPaperBasedRecommendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.RSC paper-based recommendation");

                    b.Property<string>("AssessmentDetailsRscPostInterviewRecommendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.RSC post-interview recommendation");

                    b.Property<string>("AssessmentDetailsWasSuccessfulFsPresumptionSponsorRecommendedByTheLa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Assessment Details.Was successful FS presumption sponsor recommended by the LA?");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("SectionBNeedB11619ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1(16-19) Application assessment comments");

                    b.Property<string>("SectionBNeedB11619ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1(16-19) Application assessment score");

                    b.Property<string>("SectionBNeedB11619CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B1(16-19) Characteristics (Old)");

                    b.Property<string>("SectionBNeedB11619CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B1(16-19) Characteristics (Wave 14)");

                    b.Property<string>("SectionBNeedB11619FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1(16-19) Final score");

                    b.Property<string>("SectionBNeedB11619Indicators")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1(16-19) Indicators");

                    b.Property<string>("SectionBNeedB11619InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1(16-19) Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionBNeedB11619IsTheLocalAuthoritySupportiveOfTheSchool")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1(16-19) Is the Local Authority supportive of the school?");

                    b.Property<string>("SectionBNeedB11619ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1(16-19) Score after interview");

                    b.Property<string>("SectionBNeedB11619SiftAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1(16-19) Sift assessment comments");

                    b.Property<string>("SectionBNeedB11619SiftAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1(16-19) Sift assessment score");

                    b.Property<string>("SectionBNeedB11ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.1 Application assessment comments");

                    b.Property<string>("SectionBNeedB11ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.1 Application assessment score");

                    b.Property<string>("SectionBNeedB11CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B1.1 Characteristics (Old)");

                    b.Property<string>("SectionBNeedB11CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B1.1 Characteristics (Wave 14)");

                    b.Property<string>("SectionBNeedB11FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.1 Final score");

                    b.Property<string>("SectionBNeedB11IndicatorsContributory")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.1 Indicators - Contributory");

                    b.Property<string>("SectionBNeedB11IndicatorsCore")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.1 Indicators - Core");

                    b.Property<string>("SectionBNeedB11InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.1 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionBNeedB11IsTheLocalAuthoritySupportiveOfTheSchool")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.1 Is the Local Authority supportive of the school?");

                    b.Property<string>("SectionBNeedB11ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.1 Score after interview");

                    b.Property<string>("SectionBNeedB11SiftAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.1 Sift assessment comments");

                    b.Property<string>("SectionBNeedB11SiftAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.1 Sift assessment score");

                    b.Property<string>("SectionBNeedB12ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.2 Application assessment comments");

                    b.Property<string>("SectionBNeedB12ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.2 Application assessment score");

                    b.Property<string>("SectionBNeedB12FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.2 Final score");

                    b.Property<string>("SectionBNeedB12InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.2 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionBNeedB12ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.2 Score after interview");

                    b.Property<string>("SectionBNeedB12SiftAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B1.2 Sift assessment comments");

                    b.Property<string>("SectionBNeedB12SiftAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B1.2 Sift assessment score");

                    b.Property<string>("SectionBNeedB21619ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2(16-19) Application assessment comments");

                    b.Property<string>("SectionBNeedB21619ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2(16-19) Application assessment score");

                    b.Property<string>("SectionBNeedB21619CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B2(16-19) Characteristics (Old)");

                    b.Property<string>("SectionBNeedB21619CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B2(16-19) Characteristics (Wave 14)");

                    b.Property<string>("SectionBNeedB21619FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2(16-19) Final score");

                    b.Property<string>("SectionBNeedB21619IndicatorsContributory")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2(16-19) Indicators – Contributory");

                    b.Property<string>("SectionBNeedB21619IndicatorsCore")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2(16-19) Indicators – Core");

                    b.Property<string>("SectionBNeedB21619InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2(16-19) Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionBNeedB21619ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2(16-19) Score after interview");

                    b.Property<string>("SectionBNeedB21619SiftAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2(16-19) Sift assessment comments");

                    b.Property<string>("SectionBNeedB21619SiftAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2(16-19) Sift assessment score");

                    b.Property<string>("SectionBNeedB2ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2 Application assessment comments");

                    b.Property<string>("SectionBNeedB2ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2 Application assessment score");

                    b.Property<string>("SectionBNeedB2CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B2 Characteristics (Old)");

                    b.Property<string>("SectionBNeedB2CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section B - Need.B2 Characteristics (Wave 14)");

                    b.Property<string>("SectionBNeedB2FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2 Final score");

                    b.Property<string>("SectionBNeedB2IndicatorsContributory")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2 Indicators – Contributory");

                    b.Property<string>("SectionBNeedB2IndicatorsCore")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2 Indicators - Core");

                    b.Property<string>("SectionBNeedB2InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionBNeedB2ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2 Score after interview");

                    b.Property<string>("SectionBNeedB2SiftAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B2 Sift assessment comments");

                    b.Property<string>("SectionBNeedB2SiftAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B2 Sift assessment score");

                    b.Property<string>("SectionBNeedBNAfterInterviewNurseryNeedSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B(N) After interview nursery need summary comments");

                    b.Property<string>("SectionBNeedBNEngagementWithTheLocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.B(N) Engagement with the local authority");

                    b.Property<string>("SectionBNeedBNNurseryNeedInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B(N) Nursery need interview prompts");

                    b.Property<string>("SectionBNeedBNNurseryNeedSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.B(N) Nursery need summary comments");

                    b.Property<string>("SectionBNeedFinalTotalPercentageScoreForSectionB")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.Final total percentage score for Section B");

                    b.Property<string>("SectionBNeedNeedApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.Need application assessment score");

                    b.Property<string>("SectionBNeedNeedCommentaryAndInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.Need commentary and interview prompts");

                    b.Property<string>("SectionBNeedNeedSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section B - Need.Need summary comments");

                    b.Property<string>("SectionBNeedPostcode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.Postcode");

                    b.Property<string>("SectionBNeedWillWeContinueToAssess1619")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section B - Need.Will we continue to assess 16-19?");

                    b.Property<string>("SectionCVisionC1ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.C1 Application assessment comments");

                    b.Property<string>("SectionCVisionC1ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.C1 Application assessment score");

                    b.Property<string>("SectionCVisionC1CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section C - Vision.C1 Characteristics (Old)");

                    b.Property<string>("SectionCVisionC1CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section C - Vision.C1 Characteristics (Wave 14)");

                    b.Property<string>("SectionCVisionC1FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.C1 Final score");

                    b.Property<string>("SectionCVisionC1InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.C1 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionCVisionC1ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.C1 Score after interview");

                    b.Property<string>("SectionCVisionCNAfterInterviewSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.C(N) After interview summary comments");

                    b.Property<string>("SectionCVisionCNAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.C(N) Assessment");

                    b.Property<string>("SectionCVisionCNAssessmentAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.C(N) Assessment after interview");

                    b.Property<string>("SectionCVisionCNAssessmentSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.C(N) Assessment summary comments");

                    b.Property<string>("SectionCVisionCNNurseryVisionInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.C(N) Nursery vision interview prompts");

                    b.Property<string>("SectionCVisionFinalTotalPercentageScoreForSectionC")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.Final total percentage score for section C");

                    b.Property<string>("SectionCVisionVisionApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section C - Vision.Vision application assessment score");

                    b.Property<string>("SectionCVisionVisionInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.Vision interview prompts");

                    b.Property<string>("SectionCVisionVisionSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section C - Vision.Vision summary comments");

                    b.Property<string>("SectionDEngagementCharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section D - Engagement.Characteristics (Old)");

                    b.Property<string>("SectionDEngagementCharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section D - Engagement.Characteristics (Wave 14)");

                    b.Property<string>("SectionDEngagementD1ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section D - Engagement.D1 Application assessment comments");

                    b.Property<string>("SectionDEngagementD1ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section D - Engagement.D1 Application assessment score");

                    b.Property<string>("SectionDEngagementD1FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section D - Engagement.D1 Final score");

                    b.Property<string>("SectionDEngagementD1InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section D - Engagement.D1 Interview comments - evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionDEngagementD1ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section D - Engagement.D1 Score after interview");

                    b.Property<string>("SectionDEngagementEngagementWithParentsAndTheLocalCommunityApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section D - Engagement.Engagement with parents and the local community application assessment score");

                    b.Property<string>("SectionDEngagementEngagementWithParentsAndTheLocalCommunityInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section D - Engagement.Engagement with parents and the local community interview prompts");

                    b.Property<string>("SectionDEngagementEngagementWithParentsAndTheLocalCommunitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section D - Engagement.Engagement with parents and the local community summary comments");

                    b.Property<string>("SectionDEngagementFinalTotalPercentageScoreForSectionD")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section D - Engagement.Final total percentage score for section D");

                    b.Property<string>("SectionEEducationPlanE1ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E1 Application assessment comments");

                    b.Property<string>("SectionEEducationPlanE1ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E1 Application assessment score");

                    b.Property<string>("SectionEEducationPlanE1CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E1 Characteristics (Old)");

                    b.Property<string>("SectionEEducationPlanE1CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E1 Characteristics (Wave 14)");

                    b.Property<string>("SectionEEducationPlanE1FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E1 Final score");

                    b.Property<string>("SectionEEducationPlanE1InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E1 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionEEducationPlanE1ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E1 Score after interview");

                    b.Property<string>("SectionEEducationPlanE2ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E2 Application assessment comments");

                    b.Property<string>("SectionEEducationPlanE2ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E2 Application assessment score");

                    b.Property<string>("SectionEEducationPlanE2CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E2 Characteristics (Old)");

                    b.Property<string>("SectionEEducationPlanE2CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E2 Characteristics (Wave 14)");

                    b.Property<string>("SectionEEducationPlanE2FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E2 Final score");

                    b.Property<string>("SectionEEducationPlanE2InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E2 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionEEducationPlanE2ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E2 Score after interview");

                    b.Property<string>("SectionEEducationPlanE3ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E3 Application assessment comments");

                    b.Property<string>("SectionEEducationPlanE3ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E3 Application assessment score");

                    b.Property<string>("SectionEEducationPlanE3CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E3 Characteristics (Old)");

                    b.Property<string>("SectionEEducationPlanE3CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E3 Characteristics (Wave 14)");

                    b.Property<string>("SectionEEducationPlanE3FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E3 Final score");

                    b.Property<string>("SectionEEducationPlanE3InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E3 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionEEducationPlanE3ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E3 Score after interview");

                    b.Property<string>("SectionEEducationPlanE4ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E4 Application assessment comments");

                    b.Property<string>("SectionEEducationPlanE4ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E4 Application assessment score");

                    b.Property<string>("SectionEEducationPlanE4CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E4 Characteristics (Old)");

                    b.Property<string>("SectionEEducationPlanE4CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section E - Education Plan.E4 Characteristics (Wave 14)");

                    b.Property<string>("SectionEEducationPlanE4FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E4 Final score");

                    b.Property<string>("SectionEEducationPlanE4InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E4 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionEEducationPlanE4ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E4 Score after interview");

                    b.Property<string>("SectionEEducationPlanENAfterInterviewModelAndViabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E(N) After interview model and viability summary comments");

                    b.Property<string>("SectionEEducationPlanENModelType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.E(N) Model type");

                    b.Property<string>("SectionEEducationPlanENNurseryModelAndViabilityInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E(N) Nursery model and viability interview prompts");

                    b.Property<string>("SectionEEducationPlanENNurseryModelAndViabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.E(N) Nursery model and viability summary comments");

                    b.Property<string>("SectionEEducationPlanEducationAdviserAssessment")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.Education adviser assessment");

                    b.Property<string>("SectionEEducationPlanEducationPlanApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.Education plan application assessment score");

                    b.Property<string>("SectionEEducationPlanEducationPlanInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.Education plan interview prompts");

                    b.Property<string>("SectionEEducationPlanEducationPlanSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.Education plan summary comments");

                    b.Property<string>("SectionEEducationPlanFinalTotalPercentageScoreForSectionE")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.Final total percentage score for section E");

                    b.Property<string>("SectionEEducationPlanIoDResidentialRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.IoD Residential RAG");

                    b.Property<string>("SectionEEducationPlanIoDSchoolBasedRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section E - Education Plan.IoD School Based RAG");

                    b.Property<string>("SectionEEducationPlanRagCommentaryBox")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section E - Education Plan.RAG commentary box");

                    b.Property<string>("SectionFCapacityAndCapabilityCapacityAndCapabilityApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.Capacity and capability application assessment score");

                    b.Property<string>("SectionFCapacityAndCapabilityCapacityAndCapabilityInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.Capacity and capability interview prompts");

                    b.Property<string>("SectionFCapacityAndCapabilityCapacityAndCapabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.Capacity and capability summary comments");

                    b.Property<string>("SectionFCapacityAndCapabilityDoesTheProposerGroupHaveAnyOpenSchools")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.Does the proposer group have any open schools?");

                    b.Property<string>("SectionFCapacityAndCapabilityDoesTheProposerGroupRunAnyOpenStateFundedSchools")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.Does the proposer group run any open state funded schools?");

                    b.Property<string>("SectionFCapacityAndCapabilityExistingProviderSummary")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.Existing provider summary");

                    b.Property<string>("SectionFCapacityAndCapabilityF1ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F1 Application assessment comments");

                    b.Property<string>("SectionFCapacityAndCapabilityF1ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F1 Application assessment score");

                    b.Property<string>("SectionFCapacityAndCapabilityF1CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F1 Characteristics (Old)");

                    b.Property<string>("SectionFCapacityAndCapabilityF1CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F1 Characteristics (Wave 14)");

                    b.Property<string>("SectionFCapacityAndCapabilityF1FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F1 Final score");

                    b.Property<string>("SectionFCapacityAndCapabilityF1InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F1 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionFCapacityAndCapabilityF1ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F1 Score after interview");

                    b.Property<string>("SectionFCapacityAndCapabilityF2ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F2 Application assessment comments");

                    b.Property<string>("SectionFCapacityAndCapabilityF2ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F2 Application assessment score");

                    b.Property<string>("SectionFCapacityAndCapabilityF2CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F2 Characteristics (Old)");

                    b.Property<string>("SectionFCapacityAndCapabilityF2CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F2 Characteristics (Wave 14)");

                    b.Property<string>("SectionFCapacityAndCapabilityF2FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F2 Final score");

                    b.Property<string>("SectionFCapacityAndCapabilityF2InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F2 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionFCapacityAndCapabilityF2ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F2 Score after interview");

                    b.Property<string>("SectionFCapacityAndCapabilityF3ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F3 Application assessment comments");

                    b.Property<string>("SectionFCapacityAndCapabilityF3ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F3 Application assessment score");

                    b.Property<string>("SectionFCapacityAndCapabilityF3CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F3 Characteristics (Old)");

                    b.Property<string>("SectionFCapacityAndCapabilityF3CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section F - Capacity and capability.F3 Characteristics (Wave 14)");

                    b.Property<string>("SectionFCapacityAndCapabilityF3FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F3 Final score");

                    b.Property<string>("SectionFCapacityAndCapabilityF3InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F3 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionFCapacityAndCapabilityF3ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F3 Score after interview");

                    b.Property<string>("SectionFCapacityAndCapabilityFNAfterInterviewCapacityAndCapabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F(N) After interview capacity and capability summary comments");

                    b.Property<string>("SectionFCapacityAndCapabilityFNNurseryCapacityAndCapabilityInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F(N) Nursery capacity and capability interview prompts");

                    b.Property<string>("SectionFCapacityAndCapabilityFNNurseryCapacityAndCapabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.F(N) Nursery capacity and capability summary comments");

                    b.Property<string>("SectionFCapacityAndCapabilityFNTrustSNurseryExperience")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.F(N) Trust's nursery experience");

                    b.Property<string>("SectionFCapacityAndCapabilityFinalTotalPercentageScoreForSectionF")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.Final total percentage score for section F");

                    b.Property<string>("SectionFCapacityAndCapabilityMatReview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.MAT Review");

                    b.Property<string>("SectionFCapacityAndCapabilityMembersNamesExperienceAndExpertise")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.Members' names, experience and expertise");

                    b.Property<string>("SectionFCapacityAndCapabilitySingleList")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section F - Capacity and capability.Single list");

                    b.Property<string>("SectionFCapacityAndCapabilityTrusteesNamesExperienceAndExpertise")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section F - Capacity and capability.Trustees' names, experience and expertise");

                    b.Property<string>("SectionGFinancialViabilityFinalTotalPercentageScoreForSectionG")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.Final total percentage score for section G");

                    b.Property<string>("SectionGFinancialViabilityFinancialViabilityApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.Financial viability application assessment score");

                    b.Property<string>("SectionGFinancialViabilityFinancialViabilityInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.Financial viability interview prompts");

                    b.Property<string>("SectionGFinancialViabilityFinancialViabilitySummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.Financial viability summary comments");

                    b.Property<string>("SectionGFinancialViabilityG1ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.G1 Application assessment comments");

                    b.Property<string>("SectionGFinancialViabilityG1ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G1 Application assessment score");

                    b.Property<string>("SectionGFinancialViabilityG1CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section G - Financial viability.G1 Characteristics (Old)");

                    b.Property<string>("SectionGFinancialViabilityG1CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section G - Financial viability.G1 Characteristics (Wave 14)");

                    b.Property<string>("SectionGFinancialViabilityG1FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G1 Final score");

                    b.Property<string>("SectionGFinancialViabilityG1InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.G1 Interview comments - evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionGFinancialViabilityG1ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G1 Score after interview");

                    b.Property<string>("SectionGFinancialViabilityG2ApplicationAssessmentComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.G2 Application assessment comments");

                    b.Property<string>("SectionGFinancialViabilityG2ApplicationAssessmentScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G2 Application assessment score");

                    b.Property<string>("SectionGFinancialViabilityG2CharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section G - Financial viability.G2 Characteristics (Old)");

                    b.Property<string>("SectionGFinancialViabilityG2CharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section G - Financial viability.G2 Characteristics (Wave 14)");

                    b.Property<string>("SectionGFinancialViabilityG2FinalScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G2 Final score");

                    b.Property<string>("SectionGFinancialViabilityG2InterviewCommentsEvidenceThatLedToAScoreChangeIfApplicable")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section G - Financial viability.G2 Interview comments – evidence that led to a score change (if applicable)");

                    b.Property<string>("SectionGFinancialViabilityG2ScoreAfterInterview")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section G - Financial viability.G2 Score after interview");

                    b.Property<string>("SectionHTheProposedSiteAddress")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Address");

                    b.Property<string>("SectionHTheProposedSiteCostTier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Cost Tier");

                    b.Property<string>("SectionHTheProposedSiteHasASiteBeenIdentified")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Has a site been identified?");

                    b.Property<string>("SectionHTheProposedSiteHighCostOutlier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.High cost outlier");

                    b.Property<string>("SectionHTheProposedSiteHighCostOutlierCommentaryBox")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.High cost outlier commentary box");

                    b.Property<string>("SectionHTheProposedSitePlanningPermissionCharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section H - The proposed site.Planning permission characteristics (Old)");

                    b.Property<string>("SectionHTheProposedSitePlanningPermissionCharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section H - The proposed site.Planning permission characteristics (Wave 14)");

                    b.Property<string>("SectionHTheProposedSitePlanningRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Planning RAG");

                    b.Property<string>("SectionHTheProposedSitePlanningRagComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Planning RAG comments");

                    b.Property<string>("SectionHTheProposedSitePlanningRagConfidence")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Planning RAG confidence");

                    b.Property<string>("SectionHTheProposedSitePostcode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Postcode");

                    b.Property<string>("SectionHTheProposedSitePropertyRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Property RAG");

                    b.Property<string>("SectionHTheProposedSitePropertyRagComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Property RAG comments");

                    b.Property<string>("SectionHTheProposedSitePropertyRagConfidence")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Property RAG confidence");

                    b.Property<string>("SectionHTheProposedSiteProposedSiteInterviewPrompts")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Proposed site interview prompts");

                    b.Property<string>("SectionHTheProposedSiteSiteAvailabilityComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Site availability comments");

                    b.Property<string>("SectionHTheProposedSiteSiteAvailabilityConfidence")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Site availability confidence");

                    b.Property<string>("SectionHTheProposedSiteSiteAvailabilityRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section H - The proposed site.Site availability RAG");

                    b.Property<string>("SectionHTheProposedSiteSiteSummaryComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section H - The proposed site.Site summary comments");

                    b.Property<string>("SectionHTheProposedSiteTenureCharacteristicsOld")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section H - The proposed site.Tenure characteristics (Old)");

                    b.Property<string>("SectionHTheProposedSiteTenureCharacteristicsWave14")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Section H - The proposed site.Tenure characteristics (Wave 14)");

                    b.Property<string>("SectionIDueDiligenceComments")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section I - Due Diligence.Comments");

                    b.Property<string>("SectionIDueDiligenceDateOfChecks")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Date of checks");

                    b.Property<string>("SectionIDueDiligenceDidDdcedReportAnythingOfConcernOrInterest")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Did DDCED report anything of concern or interest?");

                    b.Property<string>("SectionIDueDiligenceHasFsdEngagedWithOtherAreasOfTheDepartmentArddOtherUnitsWithinFsd")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section I - Due Diligence.Has FSD engaged with other areas of the department? (ARDD, other units within FSD)");

                    b.Property<string>("SectionIDueDiligenceHaveDueDiligenceChecksBeenUndertakenByFsd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Have due diligence checks been undertaken by FSD?");

                    b.Property<string>("SectionIDueDiligenceHavePotentialRisksBeenEscalatedAndActionsIdentified")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Have potential risks been escalated and actions identified?");

                    b.Property<string>("SectionIDueDiligenceIsADdcedRepresentativeRequiredToSitOnTheInterviewPanel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Is a DDCED representative required to sit on the interview panel?");

                    b.Property<string>("SectionIDueDiligenceIsThereAnythingOfConcernOrInterest")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Is there anything of concern or interest?");

                    b.Property<string>("SectionIDueDiligenceLinkToDueDiligenceChecklist")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Section I - Due Diligence.Link to due diligence checklist");

                    b.Property<string>("SectionIDueDiligencePleaseProvideDetailsAndSuggestedActionsRemedies")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section I - Due Diligence.Please provide details and suggested actions/remedies");

                    b.Property<string>("SectionIDueDiligencePleaseProvideDetailsAndSuggestedActionsRemediesDdced")
                        .HasMaxLength(4799)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4799)")
                        .HasColumnName("Section I - Due Diligence.Please provide details and suggested actions/remedies (DDCED)");

                    b.HasKey("Rid");

                    b.ToTable("KAI", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Kpi", b =>
                {
                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("AprilIndicator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("April Indicator");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeed")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Basic Need.Additional evidence of need");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeedSecondary")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("Basic Need.Additional evidence of need - secondary");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Additional evidence of need - secondary (assessment)");

                    b.Property<string>("BasicNeedKp02PlanningAreaCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.KP02_Planning area code");

                    b.Property<string>("BasicNeedKp04PlanningAreaCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.KP04_Planning area code");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaAllYearGroupsInScapYear4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area (all year groups in SCAP year +4)");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaAllYearGroupsInScapYear4Secondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area (all year groups in SCAP year +4) - secondary");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaYearOfOpeningAllYearGroups")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area — year of opening (all year groups)");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaYearOfOpeningAllYearGroupsSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area - year of opening (all year groups) - secondary");

                    b.Property<string>("BasicNeedPlanningAreaCodeSecondary")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.Planning area code - secondary");

                    b.Property<string>("BasicNeedPlanningAreaCodeSecondaryAssessment")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.Planning area code - secondary (assessment)");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesInLocalArea")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places in local area");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesInLocalAreaSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places in local area - secondary");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places - secondary (assessment)");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeed")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need (assessment)");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need - secondary");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need - secondary (assessment)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaAllYearGroupsInScapYear4")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area (all year groups in SCAP year +4)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaAllYearGroupsInScapYear4Secondary")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area (all year groups in SCAP year +4) - secondary");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaYearOfOpeningAllYearGroups")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area — year of opening (all year groups)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaYearOfOpeningAllYearGroupsSecondary")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area - year of opening (all year groups) - secondary");

                    b.Property<string>("BasicNeedYearOfProjectedNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of projected need - secondary (assessment)");

                    b.Property<string>("BasicNeedYearOfScapSurvey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of SCAP survey");

                    b.Property<string>("BasicNeedYearOfScapSurveySecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of SCAP survey - secondary");

                    b.Property<string>("CommunicationsArchivedLinesToTake")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Archived lines to take");

                    b.Property<string>("CommunicationsCurrentLinesToTake")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Current lines to take");

                    b.Property<string>("CommunicationsMediaPenPortrait")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Media pen portrait");

                    b.Property<string>("ContingencyPlanningBackUpField")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.Back-up Field");

                    b.Property<string>("ContingencyPlanningCanCurrentCohortRemainInSchool")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Can current cohort remain in school?");

                    b.Property<string>("ContingencyPlanningCanSchoolTakeOnAnotherCohort")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Can school take on another cohort?");

                    b.Property<string>("ContingencyPlanningCanTempsBeExtended")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.Can temps be extended?");

                    b.Property<string>("ContingencyPlanningEssentialThatItIsDeliveredForSeptemberOrCurrentScheduledDateInTheRealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Essential that it is delivered for September (or current scheduled date) in the Realistic Year of Opening?");

                    b.Property<string>("ContingencyPlanningExtraInformation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.Extra information");

                    b.Property<string>("ContingencyPlanningFscDeliverabilityAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.FSC Deliverability Assessment");

                    b.Property<string>("ContingencyPlanningFscDeliverabilityComment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.FSC Deliverability Comment");

                    b.Property<string>("ContingencyPlanningHowLongCanTempsBeExtended")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.How long can temps be extended?");

                    b.Property<string>("ContingencyPlanningHowManyStudentsWillNeedAlternativeArrangements")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.How many students will need alternative arrangements?");

                    b.Property<string>("ContingencyPlanningIfOtherWhy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If 'Other', why?");

                    b.Property<string>("ContingencyPlanningIfOtherWhyForRAndAExplainAnythingBeingExploredOrNextSteps")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If 'Other', why? (for R and A, explain anything being explored or next steps)");

                    b.Property<string>("ContingencyPlanningIfYesWhy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If ‘Yes’, why?");

                    b.Property<string>("ContingencyPlanningProjectedLengthOfDelayToProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Projected length of delay to project");

                    b.Property<string>("ContingencyPlanningRddRationale")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.RDD Rationale");

                    b.Property<string>("ContingencyPlanningRddSiteContingencyRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.RDD Site Contingency RAG");

                    b.Property<string>("ContingencyPlanningSiteShutdown")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Site shutdown");

                    b.Property<string>("FsType")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("FS_Type");

                    b.Property<string>("FsType1")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("FS_Type_1");

                    b.Property<string>("KeyContactsAddressOfLeadProposer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Key Contacts.Address of lead proposer");

                    b.Property<string>("KeyContactsAllocatedLawFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Allocated law firm");

                    b.Property<string>("KeyContactsAssessmentTeamLeader")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Assessment team leader");

                    b.Property<string>("KeyContactsChairOfGovernorsEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors email");

                    b.Property<string>("KeyContactsChairOfGovernorsMat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT");

                    b.Property<string>("KeyContactsChairOfGovernorsMatEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT email");

                    b.Property<string>("KeyContactsChairOfGovernorsMatPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT phone");

                    b.Property<string>("KeyContactsChairOfGovernorsName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors name");

                    b.Property<string>("KeyContactsChairOfGovernorsPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors phone");

                    b.Property<string>("KeyContactsCommercialManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Commercial Manager");

                    b.Property<string>("KeyContactsEaOnceSchoolIsOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.EA once school is open");

                    b.Property<string>("KeyContactsEducationAdviserAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Education adviser (assessment)");

                    b.Property<string>("KeyContactsEducationAdviserPreOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Education adviser (pre-opening)");

                    b.Property<string>("KeyContactsEsfaAcademiesSeniorAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA academies senior adviser");

                    b.Property<string>("KeyContactsEsfaCapitalHeadOfRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital Head of Region");

                    b.Property<string>("KeyContactsEsfaCapitalProjectDirector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project director");

                    b.Property<string>("KeyContactsEsfaCapitalProjectManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project manager");

                    b.Property<string>("KeyContactsEsfaCapitalProjectManagerFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project manager firm");

                    b.Property<string>("KeyContactsEsfaLinkOfficer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Link Officer");

                    b.Property<string>("KeyContactsEsfaPropertyLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA property lead");

                    b.Property<string>("KeyContactsEsfaRegionalPropertyLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA regional property lead");

                    b.Property<string>("KeyContactsEsfaTechnicalAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA technical adviser");

                    b.Property<string>("KeyContactsFrameworkPlanningConsultant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning consultant");

                    b.Property<string>("KeyContactsFrameworkPlanningFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning firm");

                    b.Property<string>("KeyContactsFrameworkPlanningFirmOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning firm – other");

                    b.Property<string>("KeyContactsFsgAssessmentLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG assessment lead");

                    b.Property<string>("KeyContactsFsgGrade6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG Grade 6");

                    b.Property<string>("KeyContactsFsgLeadContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG lead contact");

                    b.Property<string>("KeyContactsFsgTeamLeader")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG team leader");

                    b.Property<string>("KeyContactsIctAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ICT adviser");

                    b.Property<string>("KeyContactsInterviewChair")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Interview chair");

                    b.Property<string>("KeyContactsLeadProposerEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer email ");

                    b.Property<string>("KeyContactsLeadProposerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer name");

                    b.Property<string>("KeyContactsLeadProposerPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer phone");

                    b.Property<string>("KeyContactsLegalFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Legal firm");

                    b.Property<string>("KeyContactsLegalManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Legal manager");

                    b.Property<string>("KeyContactsLocalAuthorityContactPresumptionProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Local authority contact (presumption project)");

                    b.Property<string>("KeyContactsLocatEdAcquisitionManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.LocatED acquisition manager");

                    b.Property<string>("KeyContactsNamedContactOnceSchoolIsOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Named contact once school is open");

                    b.Property<string>("KeyContactsPlanningAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Planning Adviser");

                    b.Property<string>("KeyContactsPostCodeForMapping")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.PostCode for Mapping");

                    b.Property<string>("KeyContactsPostcode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Postcode");

                    b.Property<string>("KeyContactsPrincipalDesignateEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate email");

                    b.Property<string>("KeyContactsPrincipalDesignateName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate Name");

                    b.Property<string>("KeyContactsPrincipalDesignatePhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate phone");

                    b.Property<string>("KeyContactsPropertyAdviserAllocated")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property adviser allocated");

                    b.Property<string>("KeyContactsPropertyDocumentRepositoryLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property document repository link");

                    b.Property<string>("KeyContactsPropertyFirmDealing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property firm dealing");

                    b.Property<string>("KeyContactsSchoolAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Key Contacts.School address");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader email");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader name");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader phone");

                    b.Property<string>("KeyContactsStrategicDesignAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Strategic design adviser");

                    b.Property<string>("KeyContactsTechnicalAdvisoryFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Technical advisory firm");

                    b.Property<string>("KeyContactsTrustSIctLeadContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact");

                    b.Property<string>("KeyContactsTrustSIctLeadContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact email");

                    b.Property<string>("KeyContactsTrustSIctLeadContactPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact phone");

                    b.Property<string>("LeadSponsorId")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Lead sponsor ID");

                    b.Property<string>("LeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Lead sponsor name");

                    b.Property<string>("LocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local authority");

                    b.Property<string>("MatUnitProjects")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("MAT Unit Projects");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<DateTime?>("ProjectStatusActualDateOfOpeningInPermanentAccommodation")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual date of opening in permanent accommodation");

                    b.Property<DateTime?>("ProjectStatusActualDateOfOpeningInTemporaryAccommodation")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual date of opening in temporary accommodation");

                    b.Property<DateTime?>("ProjectStatusActualOpeningDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual opening date");

                    b.Property<string>("ProjectStatusCommentaryForCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for cancellation");

                    b.Property<string>("ProjectStatusCommentaryForFirstDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for first deferral");

                    b.Property<string>("ProjectStatusCommentaryForSecondDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for second deferral");

                    b.Property<string>("ProjectStatusCommentaryForThirdDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for third deferral");

                    b.Property<string>("ProjectStatusCommentaryForWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for withdrawal");

                    b.Property<string>("ProjectStatusCurrentFreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Current free school name");

                    b.Property<DateTime?>("ProjectStatusDateCancelled")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date cancelled");

                    b.Property<DateTime?>("ProjectStatusDateClosed")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date closed");

                    b.Property<DateTime?>("ProjectStatusDateOfApplicationIfOutsideWave")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of application if outside wave");

                    b.Property<DateTime?>("ProjectStatusDateOfEntryIntoPreOpening")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of entry into pre-opening");

                    b.Property<DateTime?>("ProjectStatusDateOfFirstDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of first deferral");

                    b.Property<DateTime?>("ProjectStatusDateOfSecondDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of second deferral");

                    b.Property<DateTime?>("ProjectStatusDateOfThirdDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of third deferral");

                    b.Property<DateTime?>("ProjectStatusDateWithdrawn")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date withdrawn");

                    b.Property<string>("ProjectStatusFreeSchoolApplicationWave")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Free school application wave");

                    b.Property<string>("ProjectStatusFreeSchoolPenPortrait")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project Status.Free school pen portrait");

                    b.Property<string>("ProjectStatusFreeSchoolsApplicationNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Project Status.Free schools application number");

                    b.Property<string>("ProjectStatusHasProjectBeenCancelled")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been cancelled?");

                    b.Property<string>("ProjectStatusHasProjectBeenDeferredForASecondTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been deferred for a second time?");

                    b.Property<string>("ProjectStatusHasProjectBeenDeferredForAThirdTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been deferred for a third time?");

                    b.Property<string>("ProjectStatusHasProjectBeenWithdrawn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been withdrawn?");

                    b.Property<string>("ProjectStatusHasTheFreeSchoolChangedItsName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has the free school changed its name?");

                    b.Property<string>("ProjectStatusHasTheProjectBeenDeferred")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has the project been deferred?");

                    b.Property<string>("ProjectStatusKp05ReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.KP05_Reason for site deferral");

                    b.Property<string>("ProjectStatusKp06ReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.KP06_Reason for site deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingFirstDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following first deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingSecondDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following second deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingThirdDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following third deferral");

                    b.Property<DateTime?>("ProjectStatusPlannedMoveDateToPermanentSite")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Planned move date to permanent site");

                    b.Property<string>("ProjectStatusPreviousFreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Previous free school name");

                    b.Property<string>("ProjectStatusPrimaryReasonForCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for cancellation");

                    b.Property<string>("ProjectStatusPrimaryReasonForFirstDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for first deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForSecondDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for second deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForThirdDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for third deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for withdrawal");

                    b.Property<string>("ProjectStatusProjectId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Project Status.Project ID");

                    b.Property<string>("ProjectStatusProjectStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Project status");

                    b.Property<DateTime?>("ProjectStatusProvisionalOpeningDateAgreedWithTrust")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Provisional opening date agreed with trust");

                    b.Property<string>("ProjectStatusRealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Realistic year of opening");

                    b.Property<string>("ProjectStatusReasonForSiteCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site cancellation");

                    b.Property<string>("ProjectStatusReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site deferral");

                    b.Property<string>("ProjectStatusReasonForSiteWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site withdrawal");

                    b.Property<string>("ProjectStatusRebrokeredUrn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Rebrokered URN");

                    b.Property<string>("ProjectStatusTrustsPreferredYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Trusts preferred year of opening");

                    b.Property<string>("ProjectStatusUrnWhenGivenOne")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.URN (when given one)");

                    b.Property<DateTime?>("RatProvisionalOpeningDateAgreedWithTrust")
                        .HasColumnType("date")
                        .HasColumnName("RAT Provisional opening date agreed with trust");

                    b.Property<string>("RyooWd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RYOO_WD");

                    b.Property<string>("SchoolDetailsAeaCatagory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.AEA Catagory");

                    b.Property<string>("SchoolDetailsAgeRange")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Age range");

                    b.Property<string>("SchoolDetailsConstituency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Constituency");

                    b.Property<string>("SchoolDetailsConstituencyMp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Constituency MP");

                    b.Property<string>("SchoolDetailsDeprivationDecline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Deprivation decline");

                    b.Property<string>("SchoolDetailsDetailsOfResidentialBoardingProvision")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("School Details.Details of residential/boarding provision");

                    b.Property<string>("SchoolDetailsDistinguishingFeatures")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("School Details.Distinguishing features");

                    b.Property<string>("SchoolDetailsDistrict")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.District");

                    b.Property<string>("SchoolDetailsEfaTerritory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.EFA Territory");

                    b.Property<string>("SchoolDetailsEmployerPartners")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Employer Partners");

                    b.Property<string>("SchoolDetailsEmployerSponsorsUtcsSsOnly")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Employer sponsors - UTCs/SS only");

                    b.Property<string>("SchoolDetailsFaithStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Faith status");

                    b.Property<string>("SchoolDetailsFaithType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Faith type");

                    b.Property<string>("SchoolDetailsGender")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Gender");

                    b.Property<string>("SchoolDetailsGeographicalRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Geographical Region");

                    b.Property<string>("SchoolDetailsIndependentConverter")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Independent converter");

                    b.Property<string>("SchoolDetailsLaestabWhenGivenOne")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.LAESTAB (when given one)");

                    b.Property<string>("SchoolDetailsLeadSponsorId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("School Details.Lead sponsor ID");

                    b.Property<string>("SchoolDetailsLeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Lead sponsor name");

                    b.Property<string>("SchoolDetailsLocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Local authority");

                    b.Property<string>("SchoolDetailsLocalAuthorityControl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Local authority control");

                    b.Property<string>("SchoolDetailsNeetInLa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.% NEET in LA");

                    b.Property<string>("SchoolDetailsNumberOfFormsOfEntry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Number of forms of entry");

                    b.Property<string>("SchoolDetailsNursery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Nursery");

                    b.Property<string>("SchoolDetailsOtherPartners")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Other Partners");

                    b.Property<string>("SchoolDetailsPleaseSpecifyOtherFaithType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Please specify other faith type");

                    b.Property<string>("SchoolDetailsPleaseSpecifyOtherTypeOfProposerGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Please specify other type of proposer group");

                    b.Property<string>("SchoolDetailsPoliticalParty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Political party");

                    b.Property<string>("SchoolDetailsResidentialOrBoardingProvision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Residential or boarding provision");

                    b.Property<string>("SchoolDetailsRscRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.RSC region");

                    b.Property<string>("SchoolDetailsSchoolPhasePrimarySecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.School phase (primary, secondary)");

                    b.Property<string>("SchoolDetailsSchoolTypeMainstreamApEtc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.School type (mainstream, AP etc)");

                    b.Property<string>("SchoolDetailsSixthForm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sixth form");

                    b.Property<string>("SchoolDetailsSixthFormType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sixth form type");

                    b.Property<string>("SchoolDetailsSizeOfGoverningBody")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("School Details.Size of Governing Body");

                    b.Property<string>("SchoolDetailsSpecialism")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Specialism");

                    b.Property<string>("SchoolDetailsSpecialistResourceProvision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Specialist Resource Provision");

                    b.Property<string>("SchoolDetailsSponsorType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sponsor type");

                    b.Property<DateTime?>("SchoolDetailsStartOfTermDate")
                        .HasColumnType("date")
                        .HasColumnName("School Details.Start of term date");

                    b.Property<string>("SchoolDetailsTrustId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("School Details.Trust ID");

                    b.Property<string>("SchoolDetailsTrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Trust name");

                    b.Property<string>("SchoolDetailsTrustType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Trust type");

                    b.Property<string>("SchoolDetailsTypeOfProposerGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Type of proposer group");

                    b.Property<string>("SchoolDetailsUniversitySponsor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.University Sponsor");

                    b.Property<string>("SponsorUnitProjects")
                        .IsRequired()
                        .HasMaxLength(39)
                        .IsUnicode(false)
                        .HasColumnType("varchar(39)")
                        .HasColumnName("Sponsor Unit Projects");

                    b.Property<string>("TrustId")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Trust ID");

                    b.Property<string>("TrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trust name");

                    b.Property<string>("TrustType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trust type");

                    b.Property<string>("UpperStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Upper Status");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Wave")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.HasKey("Rid");

                    b.HasIndex("UserId");

                    b.ToTable("KPI", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.LaData", b =>
                {
                    b.Property<string>("LocalAuthoritiesLaCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.LA Code");

                    b.Property<string>("LocalAuthoritiesCapitalCostTier")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.Capital cost tier");

                    b.Property<string>("LocalAuthoritiesGeographicalRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.Geographical region");

                    b.Property<string>("LocalAuthoritiesLaLondonBased")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.LA London Based");

                    b.Property<string>("LocalAuthoritiesLaName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.LA Name");

                    b.Property<string>("LocalAuthoritiesLondonNotLondon")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.London/Not London");

                    b.Property<string>("LocalAuthoritiesRscRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local Authorities.RSC Region");

                    b.HasKey("LocalAuthoritiesLaCode");

                    b.ToTable("LA_Data", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Milestones", b =>
                {
                    b.Property<DateTime?>("FsgPreOpeningMilestonesAppEvActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.AppEv Actual date of completion");

                    b.Property<string>("FsgPreOpeningMilestonesAppEvApplicable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.AppEv Applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesAppEvBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.AppEv Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesAppEvForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.AppEv Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesAppEvReasonNotApplicable")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FSG Pre Opening Milestones.AppEv - Reason not applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesBefpActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.BEFP Actual date of completion");

                    b.Property<string>("FsgPreOpeningMilestonesBefpApplicable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.BEFP Applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesBefpBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.BEFP Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesBefpForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.BEFP Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesBefpReasonNotApplicable")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FSG Pre Opening Milestones.BEFP - Reason not applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesCoGappActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.CoGapp Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesCoGappBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.CoGapp Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesCoGappForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.CoGapp Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbscActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSC Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbscBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSC Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbscForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSC Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbsiActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSI Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbsiBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSI Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDbsiForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DBSI Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesDetailsOfFundingArrangementAgreedBetweenLaAndSponsor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Details of Funding arrangement agreed between LA and Sponsor");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDgpActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DGP Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDgpBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DGP  Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesDgpForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.DGP Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEaoActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAO Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEaoBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAO Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEaoForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAO Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesEaoMilestoneApplicable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.EAO - Milestone applicable");

                    b.Property<string>("FsgPreOpeningMilestonesEaoReasonNotApplicable")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FSG Pre Opening Milestones.EAO - Reason not applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEapolActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAPol Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEapolBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAPol Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEapolForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EAPol  Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEdBrActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EdBr Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEdBrBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EdBr Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesEdBrForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.EdBr Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFaActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FA Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFaBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FA Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFaForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FA Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFcpActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FCP Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFcpBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FCP Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFcpForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FCP Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFgpaActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FGPA Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFgpaBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FGPA Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFgpaForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FGPA Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFpaActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FPA Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFpaBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FPA Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFpaForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FPA Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFsrdActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FSRD Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFsrdBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FSRD Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesFsrdForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.FSRD Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesGiasActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.GIAS Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesGiasBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.GIAS Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesGiasForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.GIAS Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesHaveYouCompletedAndSavedYourRiskAppraisalForm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Have you completed and saved your Risk Appraisal Form?");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesIaeaActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.IAEA Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesIaeaBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.IAEA Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesIaeaForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.IAEA Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesInspectionConditionsMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Inspection conditions met?");

                    b.Property<string>("FsgPreOpeningMilestonesIsThisProjectRatedHighOrLowRiskForEducation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Is this project rated high or low risk for education?");

                    b.Property<string>("FsgPreOpeningMilestonesIsThisProjectRatedHighOrLowRiskForFinance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Is this project rated high or low risk for finance?");

                    b.Property<string>("FsgPreOpeningMilestonesIsThisProjectRatedHighOrLowRiskForGovernance")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Is this project rated high or low risk for governance?");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesKickOffMeetingHeldActualDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.Kick off meeting held Actual Date");

                    b.Property<string>("FsgPreOpeningMilestonesLinkToRiskAppraisalForm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Link to Risk Appraisal Form");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMaaActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MAA Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMaaBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MAA Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMaaForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MAA Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMfadActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MFAD  Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMfadBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MFAD  Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesMfadForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.MFAD Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesMi101CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI101_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi103CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI103_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi105LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI105_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi107LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI107_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi109LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI109_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi111LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI111_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi113LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI113_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi115LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI115_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi117LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI117_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi119LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI119_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi121LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI121_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi123LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI123_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi125LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI125_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi127LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI127_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi129LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI129_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi131LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI131_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi133LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI133_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi135LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI135_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi137LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI137_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi139LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI139_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi141LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI141_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi143LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI143_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi145LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI145_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi147LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI147_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi149LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI149_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi151LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI151_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi153LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI153_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi155LinkToSavedDocument")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.MI155_Link to saved document");

                    b.Property<string>("FsgPreOpeningMilestonesMi54CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI54_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi56CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI56_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi58CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI58_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi60CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI60_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi62CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI62_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi64CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI64_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi66CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI66_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi68CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI68_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi70CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI70_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi72CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI72_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi74CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI74_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi76CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI76_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi78CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI78_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi80CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI80_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi81CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI81_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi83CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI83_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi85CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI85_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi87CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI87_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi89CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI89_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi91CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI91_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi93CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI93_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi95CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI95_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi97CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI97_Comments on decision to approve (if applicable)");

                    b.Property<string>("FsgPreOpeningMilestonesMi99CommentsOnDecisionToApproveIfApplicable")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("FSG Pre Opening Milestones.MI99_Comments on decision to approve (if applicable)");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesOprActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.OPR Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesOprBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.OPR Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesOprForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.OPR Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesOutcomeOfInspectionAsAdvisedByOfsted")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Outcome of inspection as advised by Ofsted");

                    b.Property<string>("FsgPreOpeningMilestonesOutcomeOfRom")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.Outcome of ROM");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPdappActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PDapp Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPdappBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PDapp Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPdappForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PDapp Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPfacmActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PFACM Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPfacmBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PFACM Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesPfacmForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.PFACM Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesPfacmMilestoneApplicable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.PFACM - Milestone applicable");

                    b.Property<string>("FsgPreOpeningMilestonesPfacmReasonNotApplicable")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FSG Pre Opening Milestones.PFACM - Reason not applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesRomActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.ROM Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesRomBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.ROM Baseline date");

                    b.Property<string>("FsgPreOpeningMilestonesRomConditionsMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.ROM conditions met?");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesRomForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.ROM Forecast date");

                    b.Property<string>("FsgPreOpeningMilestonesRomReasonNotApplicable")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FSG Pre Opening Milestones.ROM - Reason not applicable");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesS9lActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.S9L Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesS9lBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.S9L Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesS9lForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.S9L Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSapActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SAP Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSapBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SAP Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSapForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SAP Forecast Date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSccActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCC Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSccBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCC Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSccForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCC Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesScrActualDateOfCompletion")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCR Actual date of completion");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesScrBaselineDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCR Baseline date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesScrForecastDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.SCR Forecast date");

                    b.Property<DateTime?>("FsgPreOpeningMilestonesSiteKickOffMeetingHeldActualDate")
                        .HasColumnType("date")
                        .HasColumnName("FSG Pre Opening Milestones.Site Kick off meeting held ( actual date)");

                    b.Property<string>("FsgPreOpeningMilestonesViewCostPlan1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.View Cost Plan 1");

                    b.Property<string>("FsgPreOpeningMilestonesViewCostPlan2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSG Pre Opening Milestones.View Cost Plan 2");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.OfstedArchive", b =>
                {
                    b.Property<DateTime?>("InspectionDate")
                        .HasColumnType("date")
                        .HasColumnName("Inspection date");

                    b.Property<string>("OfstedRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Rating");

                    b.Property<string>("Urn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("URN");

                    b.ToTable("Ofsted_Archive", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.OfstedFsg", b =>
                {
                    b.Property<string>("EducationalEstablishmentAddressPostcode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.Address postcode");

                    b.Property<string>("EducationalEstablishmentConstituency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.Constituency");

                    b.Property<DateTime?>("EducationalEstablishmentDateClosed")
                        .HasColumnType("date")
                        .HasColumnName("Educational Establishment.Date Closed");

                    b.Property<string>("EducationalEstablishmentDistrict")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.District");

                    b.Property<string>("EducationalEstablishmentLaestab")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.LAESTAB");

                    b.Property<string>("EducationalEstablishmentLocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.Local authority");

                    b.Property<DateTime?>("EducationalEstablishmentOpenDate")
                        .HasColumnType("date")
                        .HasColumnName("Educational Establishment.Open date");

                    b.Property<string>("EducationalEstablishmentRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.Region");

                    b.Property<string>("EducationalEstablishmentRscRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.RSC Region");

                    b.Property<string>("EducationalEstablishmentSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.School name");

                    b.Property<string>("EducationalEstablishmentSchoolPhase")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.School phase");

                    b.Property<string>("EducationalEstablishmentSchoolType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.School type");

                    b.Property<string>("EducationalEstablishmentStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Educational Establishment.Status");

                    b.Property<string>("EducationalEstablishmentUrn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Educational Establishment.URN");

                    b.Property<string>("LocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local authority");

                    b.Property<DateTime?>("OfstedDataModerationDate")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Moderation date");

                    b.Property<DateTime?>("OfstedDataModerationDateL")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Moderation date L");

                    b.Property<string>("OfstedDataNumberOfMonthsInCategory4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Number of months in Category 4");

                    b.Property<string>("OfstedDataNumberOfMonthsInCategory4L")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Number of months in Category 4 L");

                    b.Property<string>("OfstedDataOfstedSection5CategoryOfConcern")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Category Of Concern");

                    b.Property<string>("OfstedDataOfstedSection5CategoryOfConcernL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Category Of Concern L");

                    b.Property<DateTime?>("OfstedDataOfstedSection5DateInCategory4")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Date in Category 4");

                    b.Property<DateTime?>("OfstedDataOfstedSection5DateInCategory4L")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Date in Category 4 L");

                    b.Property<DateTime?>("OfstedDataOfstedSection5DateOutOfCategory4")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Date out of Category 4");

                    b.Property<DateTime?>("OfstedDataOfstedSection5DateOutOfCategory4L")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Date out of Category 4 L");

                    b.Property<string>("OfstedDataOfstedSection5EffectivenessLeadershipAndManagement")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Effectiveness leadership and management");

                    b.Property<DateTime?>("OfstedDataOfstedSection5InspectionDate")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 inspection date");

                    b.Property<DateTime?>("OfstedDataOfstedSection5InspectionDateL")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 5 inspection date L");

                    b.Property<string>("OfstedDataOfstedSection5OutcomesForChildrenAndLearners")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Outcomes for children and learners");

                    b.Property<string>("OfstedDataOfstedSection5OverallEffectiveness")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Overall effectiveness");

                    b.Property<string>("OfstedDataOfstedSection5OverallEffectivenessL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Overall effectiveness L");

                    b.Property<string>("OfstedDataOfstedSection5PersonalDevelopmentBehaviourAndWelfare")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Personal development, behaviour and welfare");

                    b.Property<string>("OfstedDataOfstedSection5QualityOfTeachingLearningAndAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Quality of teaching, learning and assessment");

                    b.Property<string>("OfstedDataOfstedSection5SixthFormProvision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 5 Sixth form provision");

                    b.Property<DateTime?>("OfstedDataOfstedSection8InspectionDate")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Ofsted section 8 inspection date");

                    b.Property<string>("OfstedDataOfstedSection8Judgement")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Ofsted section 8 judgement");

                    b.Property<DateTime?>("OfstedDataPreviousOfstedSection5InspectionDate")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Previous Ofsted section 5 inspection date");

                    b.Property<DateTime?>("OfstedDataPreviousOfstedSection5InspectionDateL")
                        .HasColumnType("date")
                        .HasColumnName("Ofsted Data.Previous Ofsted section 5 inspection date L");

                    b.Property<string>("OfstedDataPreviousOfstedSection5OverallEffectiveness")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Previous Ofsted section 5 Overall effectiveness");

                    b.Property<string>("OfstedDataPreviousOfstedSection5OverallEffectivenessL")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Ofsted Data.Previous Ofsted section 5 Overall effectiveness L");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Phase")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ProjectUrn")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Project URN");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("Ofsted_FSG", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Opens", b =>
                {
                    b.Property<string>("CurrentStatusCaseNote")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Current Status.Case note");

                    b.Property<DateTime?>("CurrentStatusDateOfLatestCaseNote")
                        .HasColumnType("date")
                        .HasColumnName("Current Status.Date of latest case note");

                    b.Property<string>("CurrentStatusDueDiligenceConcerns")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Current Status.Due diligence concerns?");

                    b.Property<string>("CurrentStatusEfaTerritoryConcernLevel")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Current Status.EFA territory concern level");

                    b.Property<string>("CurrentStatusFinancialConcerns")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Current Status.Financial concerns");

                    b.Property<string>("CurrentStatusGovernanceAndCompliance")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Current Status.Governance and compliance");

                    b.Property<string>("CurrentStatusIntervention")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Current Status.Intervention");

                    b.Property<string>("CurrentStatusIrregularity")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Current Status.Irregularity");

                    b.Property<string>("CurrentStatusPrincipalSameAsOnOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Current Status.Principal same as on opening");

                    b.Property<string>("FinancialChecksAdditionalDebtDeficit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Additional Debt/ Deficit");

                    b.Property<string>("FinancialChecksBudgetReturnSubmittedByLastDeadline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Budget return submitted by last deadline");

                    b.Property<string>("FinancialChecksFinancialNoticeToImproveIssued")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Financial Notice to Improve issued");

                    b.Property<string>("FinancialChecksFinancialStatementsQualified")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Financial statements qualified");

                    b.Property<string>("FinancialChecksFinancialStatementsSubmittedByLastDeadline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Financial statements submitted by last deadline");

                    b.Property<string>("FinancialChecksFmgsReturnSubmittedByLastDeadline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.FMGS return submitted by last deadline");

                    b.Property<string>("FinancialChecksMindedToIssueFnti")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Minded to issue FNTI");

                    b.Property<string>("FinancialChecksMostRecentAuditedAccountsReceivedOnTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Most recent audited accounts received on time");

                    b.Property<string>("FinancialChecksProjectDevelopmentGrantFinalReturnReceived")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Project Development Grant final return received");

                    b.Property<string>("FinancialChecksRegularityOpinionQualified")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Regularity opinion qualified");

                    b.Property<string>("FinancialChecksTotalOutstandingPna")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Total Outstanding PNA");

                    b.Property<string>("FinancialChecksTotalRevenueLiabilities")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Checks.Total Revenue Liabilities");

                    b.Property<string>("OpenPupilNumbersAcceptedApplicationsYr10ForNextYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Accepted applications Yr 10 for next year");

                    b.Property<string>("OpenPupilNumbersAcceptedApplicationsYr12ForNextYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Accepted applications Yr 12 for next year");

                    b.Property<string>("OpenPupilNumbersApplicationsYr10ForTheComingYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Applications Yr 10 for the coming year");

                    b.Property<string>("OpenPupilNumbersApplicationsYr12ForTheComingYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Applications Yr 12 for the coming year");

                    b.Property<string>("OpenPupilNumbersCapacityAgreedInPreOpening")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Capacity agreed in pre-opening");

                    b.Property<DateTime?>("OpenPupilNumbersCensusDate")
                        .HasColumnType("date")
                        .HasColumnName("Open Pupil Numbers.Census date");

                    b.Property<string>("OpenPupilNumbersCurrentPupilsOnRoll")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Current pupils on roll");

                    b.Property<DateTime?>("OpenPupilNumbersDateEfaRingRoundPupilNumbersUpdated")
                        .HasColumnType("date")
                        .HasColumnName("Open Pupil Numbers.Date EFA ring round pupil numbers updated");

                    b.Property<string>("OpenPupilNumbersEfaRingRoundPupilNumbers")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.EFA ring round pupil numbers");

                    b.Property<string>("OpenPupilNumbersFull")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.%full");

                    b.Property<string>("OpenPupilNumbersFundedNumberForTheComingYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Funded number for the coming year");

                    b.Property<string>("OpenPupilNumbersFundedNumberForTheCurrentAcademicYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Funded number for the current academic year");

                    b.Property<string>("OpenPupilNumbersNorAsOfFundedNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.NOR as % of funded number");

                    b.Property<string>("OpenPupilNumbersReception")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Reception");

                    b.Property<string>("OpenPupilNumbersTotal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.Total");

                    b.Property<string>("OpenPupilNumbersViabilityThresholdForTheComingYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Viability threshold for the coming year");

                    b.Property<string>("OpenPupilNumbersViabilityThresholdForTheCurrentAcademicYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Viability threshold for the current academic year");

                    b.Property<string>("OpenPupilNumbersY12Y14Total")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.Y12 - Y14 Total");

                    b.Property<string>("OpenPupilNumbersY7Y11Total")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.Y7 - Y11 Total");

                    b.Property<string>("OpenPupilNumbersYear1")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 1");

                    b.Property<string>("OpenPupilNumbersYear10")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 10");

                    b.Property<string>("OpenPupilNumbersYear11")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 11");

                    b.Property<string>("OpenPupilNumbersYear12")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 12");

                    b.Property<string>("OpenPupilNumbersYear13")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 13");

                    b.Property<string>("OpenPupilNumbersYear14")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 14");

                    b.Property<string>("OpenPupilNumbersYear2")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 2");

                    b.Property<string>("OpenPupilNumbersYear3")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 3");

                    b.Property<string>("OpenPupilNumbersYear4")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 4");

                    b.Property<string>("OpenPupilNumbersYear5")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 5");

                    b.Property<string>("OpenPupilNumbersYear6")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 6");

                    b.Property<string>("OpenPupilNumbersYear7")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 7");

                    b.Property<string>("OpenPupilNumbersYear8")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 8");

                    b.Property<string>("OpenPupilNumbersYear9")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Open Pupil Numbers.Year 9");

                    b.Property<string>("OpenPupilNumbersYrY6Total")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Open Pupil Numbers.YR - Y6 Total");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("Opens");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Pdfd", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardActualDateOfOpeningActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Actual date of opening (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardAllPupilsOutOfTemporaryAccommodationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.All pupils out of temporary accommodation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardAllPupilsOutOfTemporaryAccommodationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.All pupils out of temporary accommodation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardAllPupilsOutOfTemporaryAccommodationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.All pupils out of temporary accommodation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardAllPupilsOutOfTemporaryAccommodationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.All pupils out of temporary accommodation (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardCapitalProjectRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Capital Project RAG Rating");

                    b.Property<string>("ProjectDirectorForecastingDashboardCapitalProjectRagRatingCommentary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Project Director Forecasting Dashboard.Capital Project RAG Rating commentary");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardCompleteOnSiteForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Complete on site for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardCompleteOnSiteForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Complete on site for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardCompleteOnSiteForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Complete on site for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardCompleteOnSiteForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Complete on site for Main School Building (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardConstruction")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Construction");

                    b.Property<string>("ProjectDirectorForecastingDashboardConstructionCommentary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Project Director Forecasting Dashboard.Construction commentary");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardContractorAppointedForMainSchoolBuildingSpmEwaPcsaActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Contractor appointed for main school building (SPM, EWA, PCSA) (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardContractorAppointedForMainSchoolBuildingSpmEwaPcsaRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Contractor appointed for main school building (SPM, EWA, PCSA) (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardContractorAppointedForMainSchoolBuildingSpmEwaPcsaRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Contractor appointed for main school building (SPM, EWA, PCSA) (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardContractorAppointedForMainSchoolBuildingSpmEwaPcsaRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Contractor appointed for main school building (SPM, EWA, PCSA) (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfCompletionOnTemporaryAccommodationSiteIfRequiredActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of completion on temporary accommodation site, if required (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfCompletionOnTemporaryAccommodationSiteIfRequiredRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of completion on temporary accommodation site, if required (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfCompletionOnTemporaryAccommodationSiteIfRequiredRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of completion on temporary accommodation site, if required (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfCompletionOnTemporaryAccommodationSiteIfRequiredRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of completion on temporary accommodation site, if required (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of HoT secured on temporary accommodation site, if required (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of HoT secured on temporary accommodation site, if required (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of HoT secured on temporary accommodation site, if required (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of HoT secured on temporary accommodation site, if required (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of positive planning decision notice secured for main school building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of positive planning decision notice secured for main school building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of positive planning decision notice secured for main school building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardDateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Date of positive planning decision notice secured for main school building (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEndOfProjectNoMoreCapitalSpendEndOfDefectsActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.End of Project (No more capital spend/end of defects) (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEndOfProjectNoMoreCapitalSpendEndOfDefectsRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.End of Project (No more capital spend/end of defects) (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEndOfProjectNoMoreCapitalSpendEndOfDefectsRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.End of Project (No more capital spend/end of defects) (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEndOfProjectNoMoreCapitalSpendEndOfDefectsRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.End of Project (No more capital spend/end of defects) (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Contract for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Contract for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Contract for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Contract for Main School Building (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForTheInitialProvisionOfTemporaryAccommodationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into contract for the initial provision of temporary accommodation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForTheInitialProvisionOfTemporaryAccommodationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into contract for the initial provision of temporary accommodation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForTheInitialProvisionOfTemporaryAccommodationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into contract for the initial provision of temporary accommodation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoContractForTheInitialProvisionOfTemporaryAccommodationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into contract for the initial provision of temporary accommodation (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoFundingAgreementActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Funding Agreement (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoFundingAgreementRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Funding Agreement (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoFundingAgreementRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Funding Agreement (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEnterIntoFundingAgreementRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Enter into Funding Agreement (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEsfaProjectDirectorRp1DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.ESFA Project Director (RP1) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEsfaProjectDirectorRp2DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.ESFA Project Director (RP2) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardEsfaProjectDirectorRp3DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.ESFA Project Director (RP3) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardExchangeOnSiteForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Exchange on site for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardExchangeOnSiteForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Exchange on site for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardExchangeOnSiteForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Exchange on site for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardExchangeOnSiteForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Exchange on site for Main School Building (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardFdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.FD_Year");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardFeasibilityStartedForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Feasibility Started for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardFsgLeadContactActualLastUpdated")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.FSG Lead Contact (Actual) (Last Updated)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardFsgLeadContactRp1LastUpdated")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.FSG Lead Contact (RP1) (Last Updated)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardFsgLeadContactRp2LastUpdated")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.FSG Lead Contact (RP2) (Last Updated)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardFsgLeadContactRp3LastUpdated")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.FSG Lead Contact (RP3) (Last Updated)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardHoTAgreedForSiteForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.HoT Agreed for site for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardHoTAgreedForSiteForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.HoT Agreed for site for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardHoTAgreedForSiteForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.HoT Agreed for site for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardHoTAgreedForSiteForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.HoT Agreed for site for Main School Building (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredAdditionalTemporaryAccommodationReadyForOccupationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, additional temporary accommodation ready for occupation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredAdditionalTemporaryAccommodationReadyForOccupationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, additional temporary accommodation ready for occupation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredAdditionalTemporaryAccommodationReadyForOccupationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, additional temporary accommodation ready for occupation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredAdditionalTemporaryAccommodationReadyForOccupationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, additional temporary accommodation ready for occupation (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredEnterIntoContractForAdditionalTemporaryAccommodationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, enter into contract for additional temporary accommodation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredEnterIntoContractForAdditionalTemporaryAccommodationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, enter into contract for additional temporary accommodation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredEnterIntoContractForAdditionalTemporaryAccommodationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, enter into contract for additional temporary accommodation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardIfRequiredEnterIntoContractForAdditionalTemporaryAccommodationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.If required, enter into contract for additional temporary accommodation (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardLastUpdatedByPd")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Last Updated by PD");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardMainSchoolBuildingFirstReadyForOccupationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Main School Building first ready for occupation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardMainSchoolBuildingFirstReadyForOccupationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Main School Building first ready for occupation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardMainSchoolBuildingFirstReadyForOccupationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Main School Building first ready for occupation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardMainSchoolBuildingFirstReadyForOccupationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Main School Building first ready for occupation (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardPlanning")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Planning");

                    b.Property<string>("ProjectDirectorForecastingDashboardPlanningCommentary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Project Director Forecasting Dashboard.Planning commentary");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardPracticalCompletionOfContractForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Practical completion of contract for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardPracticalCompletionOfContractForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Practical completion of contract for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardPracticalCompletionOfContractForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Practical completion of contract for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardPracticalCompletionOfContractForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Practical completion of contract for Main School Building (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardProperty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Property");

                    b.Property<string>("ProjectDirectorForecastingDashboardPropertyCommentary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Project Director Forecasting Dashboard.Property commentary");

                    b.Property<string>("ProjectDirectorForecastingDashboardRealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Realistic Year of Opening");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardRhFreezeDataForReportingPeriodRp1DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.RH - Freeze data for Reporting Period (RP1) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardRhFreezeDataForReportingPeriodRp2DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.RH - Freeze data for Reporting Period (RP2) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardRhFreezeDataForReportingPeriodRp3DateApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.RH - Freeze data for Reporting Period (RP3) (Date Approved)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardSiteIdenfitifiedForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Site idenfitified for main school building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfConstructionOfMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of construction of main school building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfConstructionOfMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of construction of main school building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfConstructionOfMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of construction of main school building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfConstructionOfMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of construction of main school building (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfProcurementForMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of procurement for Main School Building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfProcurementForMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of procurement for Main School Building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfProcurementForMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of procurement for Main School Building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardStartOfProcurementForMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Start of procurement for Main School Building (RP3)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardSubmissionOfPlanningPermissionForPermanentMainSchoolBuildingActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Submission of planning permission for permanent main school building (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardSubmissionOfPlanningPermissionForPermanentMainSchoolBuildingRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Submission of planning permission for permanent main school building (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardSubmissionOfPlanningPermissionForPermanentMainSchoolBuildingRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Submission of planning permission for permanent main school building (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardSubmissionOfPlanningPermissionForPermanentMainSchoolBuildingRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Submission of planning permission for permanent main school building (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardTemporary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardTemporaryAccommodationFirstReadyForOccupationActual")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary accommodation first ready for occupation (Actual)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardTemporaryAccommodationFirstReadyForOccupationRp1")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary accommodation first ready for occupation (RP1)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardTemporaryAccommodationFirstReadyForOccupationRp2")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary accommodation first ready for occupation (RP2)");

                    b.Property<DateTime?>("ProjectDirectorForecastingDashboardTemporaryAccommodationFirstReadyForOccupationRp3")
                        .HasColumnType("date")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary accommodation first ready for occupation (RP3)");

                    b.Property<string>("ProjectDirectorForecastingDashboardTemporaryCommentary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Project Director Forecasting Dashboard.Temporary commentary");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("PDFD", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.PdfdArchive", b =>
                {
                    b.Property<string>("ActualDateOfOpeningActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Actual date of opening (Actual)");

                    b.Property<string>("AllPupilsOutOfTemporaryAccommodationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("All pupils out of temporary accommodation (Actual)");

                    b.Property<string>("AllPupilsOutOfTemporaryAccommodationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("All pupils out of temporary accommodation (Forecast)");

                    b.Property<string>("CapitalProjectRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Capital Project RAG Rating");

                    b.Property<string>("CompleteOnSiteAcquisitionForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Complete on site acquisition for Main School Building (Actual)");

                    b.Property<string>("CompleteOnSiteAcquisitionForMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Complete on site acquisition for Main School Building (Forecast)");

                    b.Property<string>("ContractorAppointedForMainSchoolBuildingSpmEwaPcsaActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contractor appointed for main school building (SPM, EWA, PCSA) (Actual)");

                    b.Property<string>("ContractorAppointedForMainSchoolBuildingSpmEwaPcsaForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contractor appointed for main school building (SPM, EWA, PCSA) (Forecast)");

                    b.Property<string>("DateHoTSecuredOnSiteForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date HoT secured on site for main school building (Actual)");

                    b.Property<string>("DateHoTSecuredOnSiteForMainSchoolBuildingBaseline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date HoT secured on site for main school building (Baseline)");

                    b.Property<string>("DateOfCompletionOnTemporaryAccommodationSiteIfRequiredActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of completion on temporary accommodation site, if required (Actual)");

                    b.Property<string>("DateOfCompletionOnTemporaryAccommodationSiteIfRequiredForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of completion on temporary accommodation site, if required (Forecast)");

                    b.Property<string>("DateOfExchangeOnSiteForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of exchange on site for main school building (Actual)");

                    b.Property<string>("DateOfExchangeOnSiteForMainSchoolBuildingBaseline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of exchange on site for main school building (Baseline)");

                    b.Property<string>("DateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of HoT secured on temporary accommodation site, if required (Actual)");

                    b.Property<string>("DateOfHoTSecuredOnTemporaryAccommodationSiteIfRequiredForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of HoT secured on temporary accommodation site, if required (Forecast)");

                    b.Property<string>("DateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of positive planning decision notice secured for main school building (Actual)");

                    b.Property<string>("DateOfPositivePlanningDecisionNoticeSecuredForMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Date of positive planning decision notice secured for main school building (Forecast)");

                    b.Property<string>("EndOfProjectNoMoreCapitalSpendEndOfDefectsActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("End of Project (No more capital spend/end of defects) (Actual)");

                    b.Property<string>("EndOfProjectNoMoreCapitalSpendEndOfDefectsForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("End of Project (No more capital spend/end of defects) (Forecast)");

                    b.Property<string>("EnterIntoContractForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into Contract for Main School Building (Actual)");

                    b.Property<string>("EnterIntoContractForMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into Contract for Main School Building (Forecast)");

                    b.Property<string>("EnterIntoContractForTheInitialProvisionOfTemporaryAccommodationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into contract for the initial provision of temporary accommodation (Actual)");

                    b.Property<string>("EnterIntoContractForTheInitialProvisionOfTemporaryAccommodationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into contract for the initial provision of temporary accommodation (Forecast)");

                    b.Property<string>("EnterIntoFundingAgreementActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into Funding Agreement (Actual)");

                    b.Property<string>("EnterIntoFundingAgreementForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Enter into Funding Agreement (Forecast)");

                    b.Property<string>("FeasibilityStartedForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Feasibility Started for Main School Building (Actual)");

                    b.Property<string>("FreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Free School Name");

                    b.Property<string>("HeadOfRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Head of Region");

                    b.Property<string>("IfRequiredAdditionalTemporaryAccommodationReadyForOccupationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("If required, additional temporary accommodation ready for occupation (Actual)");

                    b.Property<string>("IfRequiredAdditionalTemporaryAccommodationReadyForOccupationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("If required, additional temporary accommodation ready for occupation (Forecast)");

                    b.Property<string>("IfRequiredEnterIntoContractForAdditionalTemporaryAccommodationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("If required, enter into contract for additional temporary accommodation (Actual)");

                    b.Property<string>("IfRequiredEnterIntoContractForAdditionalTemporaryAccommodationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("If required, enter into contract for additional temporary accommodation (Forecast)");

                    b.Property<string>("MainSchoolBuildingFirstReadyToBeOpenedForOccupationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Main school building first ready to be opened for occupation (Actual)");

                    b.Property<string>("MainSchoolBuildingFirstReadyToBeOpenedForOccupationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Main school building first ready to be opened for occupation (Forecast)");

                    b.Property<string>("Month")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PracticalCompletionOfContractForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Practical completion of contract for Main School Building (Actual)");

                    b.Property<string>("PracticalCompletionOfContractForMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Practical completion of contract for Main School Building (Forecast)");

                    b.Property<string>("ProjectDirector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director");

                    b.Property<string>("ProjectDirectorApproval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Director Approval");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project ID");

                    b.Property<string>("ProjectManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Manager");

                    b.Property<string>("RealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Realistic Year of Opening");

                    b.Property<string>("RegionalHeadFreezeDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Regional Head - Freeze Date");

                    b.Property<string>("SiteIdentifiedForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site identified for main school building (Actual)");

                    b.Property<string>("StartOfConstructionOfMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Start of construction of main school building (Actual)");

                    b.Property<string>("StartOfConstructionOfMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Start of construction of main school building (Forecast)");

                    b.Property<string>("StartOfProcurementForMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Start of procurement for Main School Building (Actual)");

                    b.Property<string>("StartOfProcurementForMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Start of procurement for Main School Building (Forecast)");

                    b.Property<string>("SubmissionOfPlanningPermissionForPermanentMainSchoolBuildingActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Submission of planning permission for permanent main school building (Actual)");

                    b.Property<string>("SubmissionOfPlanningPermissionForPermanentMainSchoolBuildingForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Submission of planning permission for permanent main school building (Forecast)");

                    b.Property<string>("TemporaryAccommodationFirstReadyForOccupationActual")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary accommodation first ready for occupation (Actual)");

                    b.Property<string>("TemporaryAccommodationFirstReadyForOccupationForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary accommodation first ready for occupation (Forecast)");

                    b.ToTable("PDFD_Archive", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Pdgl", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("ProjectDeliveryGrantLetterPdglId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Delivery Grant Letter.PDGL ID");

                    b.Property<DateTime?>("ProjectDeliveryGrantLetterProjectDeliveryGrantLetterIssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Delivery Grant Letter.Project Delivery Grant Letter issued date");

                    b.Property<string>("ProjectDeliveryGrantLetterProjectDeliveryGrantLetterTotalValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Delivery Grant Letter.Project Delivery Grant Letter total value");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("PDGL", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.PerfFsg", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("SchoolPerformanceDataKs1Ks2ValueAdded")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS1-KS2 value added");

                    b.Property<string>("SchoolPerformanceDataKs2AverageScoreInMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 Average score in maths");

                    b.Property<string>("SchoolPerformanceDataKs2AverageScoreInReading")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 Average score in reading");

                    b.Property<string>("SchoolPerformanceDataKs2EngProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 Eng progress");

                    b.Property<string>("SchoolPerformanceDataKs2ExpectedStandardInMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 expected standard in maths");

                    b.Property<string>("SchoolPerformanceDataKs2ExpectedStandardInReading")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 expected standard in reading");

                    b.Property<string>("SchoolPerformanceDataKs2ExpectedStandardInReadingWritingAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 expected standard in reading writing and maths");

                    b.Property<string>("SchoolPerformanceDataKs2ExpectedStandardInWriting")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 expected standard in writing");

                    b.Property<string>("SchoolPerformanceDataKs2HighInMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 high in maths");

                    b.Property<string>("SchoolPerformanceDataKs2HighInReading")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 high in reading");

                    b.Property<string>("SchoolPerformanceDataKs2HighInReadingWritingAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 high in reading, writing and maths");

                    b.Property<string>("SchoolPerformanceDataKs2HighInWriting")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 high in writing");

                    b.Property<string>("SchoolPerformanceDataKs2Ks4ValueAdded")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2-KS4 value added");

                    b.Property<string>("SchoolPerformanceDataKs2Ks4ValueAddedPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2-KS4 value added Pr");

                    b.Property<string>("SchoolPerformanceDataKs2Level4EngMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 4+ Eng maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level4Maths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 4+ maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level4ReadWriteMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 4+ read write maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level4Reading")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 4+ reading");

                    b.Property<string>("SchoolPerformanceDataKs2Level4Writing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 4+ writing");

                    b.Property<string>("SchoolPerformanceDataKs2Level5EngMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 5+ Eng maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level5Maths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 5+ maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level5ReadWriteMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 5+ read write maths");

                    b.Property<string>("SchoolPerformanceDataKs2Level5Reading")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 5+ reading");

                    b.Property<string>("SchoolPerformanceDataKs2Level5Writing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 level 5+ writing");

                    b.Property<string>("SchoolPerformanceDataKs2MathsProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 maths progress");

                    b.Property<string>("SchoolPerformanceDataKs2MathsProgressLowerConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 maths progress lower confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs2MathsProgressScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 maths progress score");

                    b.Property<string>("SchoolPerformanceDataKs2MathsProgressUpperConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 maths progress upper confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs2Pupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 pupils");

                    b.Property<string>("SchoolPerformanceDataKs2PupilsAchievingAHighScoreInReadingWritingAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 pupils achieving a high score in reading, writing and maths");

                    b.Property<string>("SchoolPerformanceDataKs2ReadProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 read progress");

                    b.Property<string>("SchoolPerformanceDataKs2ReadingProgressLowerConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 reading progress lower confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs2ReadingProgressScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 reading progress score");

                    b.Property<string>("SchoolPerformanceDataKs2ReadingProgressUpperConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 reading progress upper confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs2WriteProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 write progress");

                    b.Property<string>("SchoolPerformanceDataKs2WritingProgressLowerConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 writing progress lower confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs2WritingProgressScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 writing progress score");

                    b.Property<string>("SchoolPerformanceDataKs2WritingProgressUpperConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS2 writing progress upper confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs45acIncEngMath")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 5AC inc Eng math");

                    b.Property<string>("SchoolPerformanceDataKs45acIncEngMathPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 5AC inc Eng math Pr");

                    b.Property<string>("SchoolPerformanceDataKs45acIncEngMathPupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 5AC inc Eng math Pupils");

                    b.Property<string>("SchoolPerformanceDataKs4AchievingAStandardPass5OrAboveInEnglishAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 achieving a ‘standard pass’ (5 or above) in English and maths");

                    b.Property<string>("SchoolPerformanceDataKs4AchievingAStandardPass5OrAboveInEnglishAndMathsPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 achieving a ‘standard pass’ (5 or above) in English and maths Pr");

                    b.Property<string>("SchoolPerformanceDataKs4AchievingAStrongPass5OrAboveInEnglishAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 achieving a ‘strong pass’ (5 or above) in English and maths");

                    b.Property<string>("SchoolPerformanceDataKs4AchievingAStrongPass5OrAboveInEnglishAndMathsPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 achieving a ‘strong pass’ (5 or above) in English and maths Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8Score")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8ScoreEbacc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score - Ebacc");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8ScoreEnglish")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score - English");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8ScoreMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score - Maths");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8ScoreOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score - Open");

                    b.Property<string>("SchoolPerformanceDataKs4Attainment8ScorePr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Attainment 8 score Pr");

                    b.Property<string>("SchoolPerformanceDataKs4CInEnglishAndMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 C + in English and maths");

                    b.Property<string>("SchoolPerformanceDataKs4CInEnglishAndMathsPupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 C + in English and maths Pupils");

                    b.Property<string>("SchoolPerformanceDataKs4Ebacc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 EBacc");

                    b.Property<string>("SchoolPerformanceDataKs4EbaccPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 EBacc Pr");

                    b.Property<string>("SchoolPerformanceDataKs4EbaccPupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Ebacc Pupils");

                    b.Property<string>("SchoolPerformanceDataKs4EngProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Eng progress");

                    b.Property<string>("SchoolPerformanceDataKs4EngProgressPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 Eng progress Pr");

                    b.Property<string>("SchoolPerformanceDataKs4MathsProgress")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 maths progress");

                    b.Property<string>("SchoolPerformanceDataKs4MathsProgressPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 maths progress Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8LowerConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 lower confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8LowerConfidenceIntervalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 lower confidence interval Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8Pupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 pupils");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8PupilsPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 pupils Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8Score")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8ScoreEbacc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score -Ebacc");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8ScoreEnglish")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score - English");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8ScoreMaths")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score - Maths");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8ScoreOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score - Open");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8ScorePr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 score Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8UpperConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 upper confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs4Progress8UpperConfidenceIntervalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 progress 8 upper confidence interval Pr");

                    b.Property<string>("SchoolPerformanceDataKs4Pupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 pupils");

                    b.Property<string>("SchoolPerformanceDataKs4PupilsPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS4 pupils Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ApsPerEntryAcademic")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 APS per entry (Academic)");

                    b.Property<string>("SchoolPerformanceDataKs5ApsPerEntryAcademicPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 APS per entry (Academic) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ApsPerEntryAppliedGeneral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 APS per entry (applied general)");

                    b.Property<string>("SchoolPerformanceDataKs5ApsPerEntryVocational")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 APS per entry (Vocational)");

                    b.Property<string>("SchoolPerformanceDataKs5ApsPerEntryVocationalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 APS per entry (Vocational) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAcademic")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (academic)");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAcademicPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (academic) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAll")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (all)");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAllPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (all)PR");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAppliedGeneral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (applied general)");

                    b.Property<string>("SchoolPerformanceDataKs5PupilsAppliedGeneralPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 pupils (applied general) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedAcademic")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (academic)");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedAcademicPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (academic) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedAppliedGeneral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (applied general)");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedAppliedGeneralPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (applied general) Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedLowerConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added lower confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedLowerConfidenceIntervalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added lower confidence interval Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedUpperConfidenceInterval")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added upper confidence interval");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedUpperConfidenceIntervalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added upper confidence interval Pr");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedVocational")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (Vocational)");

                    b.Property<string>("SchoolPerformanceDataKs5ValueAddedVocationalPr")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.KS5 value added (Vocational) Pr");

                    b.Property<string>("SchoolPerformanceDataNumberOfPupils")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.Number of pupils");

                    b.Property<string>("SchoolPerformanceDataProgress8OptIn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Performance Data.Progress 8 opt in");

                    b.Property<string>("SchoolPerformanceDataYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("School Performance Data.Year");

                    b.ToTable("Perf_FSG", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.PerfFsgLocal", b =>
                {
                    b.Property<string>("Attainment8ScoreLaAverage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Attainment 8 Score LA Average");

                    b.Property<string>("InEducationPercentage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("In Education (percentage)");

                    b.Property<string>("Ks4CInEnglishMathsLaAverage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS4 C+ in English & Maths LA Average (%)");

                    b.Property<string>("Ks4EbaccEnteredForEbacc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS4 Ebacc (% entered for Ebacc)");

                    b.Property<string>("Ks5ALevelApsPerEntry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS5 A-Level (APS per Entry)");

                    b.Property<string>("Ks5AcademicProgressScore")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS5 Academic Progress Score");

                    b.Property<string>("Ks5AcademicProgressScoreAverageGrade")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS5 Academic Progress Score (Average Grade)");

                    b.Property<string>("Ks5TechLevelApsPerEntry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS5 Tech Level (APS per Entry)");

                    b.Property<string>("Ks5TechLevelApsPerEntryLaAverage")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("KS5 Tech Level (APS per Entry - LA Average)");

                    b.Property<string>("ProjectId")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Project ID");

                    b.Property<string>("TotalOfStudentsStayingInEducationOrEmployment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Total % of students staying in education or employment");

                    b.Property<string>("Urn")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("URN");

                    b.Property<string>("Year")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)");

                    b.ToTable("Perf_FSG_Local", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Planning", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<bool?>("PlanningRecordAddressManualOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Planning Record.Address - Manual overwrite?");

                    b.Property<string>("PlanningRecordAddressOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Address of site");

                    b.Property<string>("PlanningRecordAppealDecision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Appeal decision");

                    b.Property<string>("PlanningRecordAppealProcedure")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Appeal procedure");

                    b.Property<string>("PlanningRecordAppealRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Appeal required?");

                    b.Property<DateTime?>("PlanningRecordClassCExpiryDateActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Class C expiry date (Actual)");

                    b.Property<DateTime?>("PlanningRecordDateAppealSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date appeal submitted (actual)");

                    b.Property<DateTime?>("PlanningRecordDateAppealSubmittedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date appeal submitted (forecast)");

                    b.Property<DateTime?>("PlanningRecordDateAppealValidatedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date appeal validated (actual)");

                    b.Property<DateTime?>("PlanningRecordDateLetterSentToLocalPlanningAuthorityActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date letter sent to local planning authority (Actual)");

                    b.Property<DateTime?>("PlanningRecordDateLetterSentToLocalPlanningAuthorityForecast")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date letter sent to local planning authority (Forecast)");

                    b.Property<DateTime?>("PlanningRecordDateOfAppealDecisionNoticeActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date of appeal decision notice (actual)");

                    b.Property<DateTime?>("PlanningRecordDateOfAppealDecisionNoticeForecast")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date of appeal decision notice (forecast)");

                    b.Property<DateTime?>("PlanningRecordDateOfPlanningDecisionNoticeActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date of planning decision notice (actual)");

                    b.Property<DateTime?>("PlanningRecordDateOfPlanningDecisionNoticeForecast")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date of planning decision notice (forecast)");

                    b.Property<DateTime?>("PlanningRecordDateOfStatutoryDeterminationActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date of statutory determination (actual)");

                    b.Property<DateTime?>("PlanningRecordDatePlanningApplicationSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date planning application submitted (actual)");

                    b.Property<DateTime?>("PlanningRecordDatePlanningApplicationSubmittedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date planning application submitted (forecast)");

                    b.Property<DateTime?>("PlanningRecordDatePlanningApplicationValidatedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date planning application validated (actual)");

                    b.Property<DateTime?>("PlanningRecordDatePlanningAppraisalCompletedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.Date planning appraisal completed (actual)");

                    b.Property<string>("PlanningRecordDescriptionOfDevelopment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Planning Record.Description of development");

                    b.Property<string>("PlanningRecordIsPlanningPermissionRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Is planning permission required?");

                    b.Property<string>("PlanningRecordIsThisTheMainPlanningRecord")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Is this the main planning record?");

                    b.Property<DateTime?>("PlanningRecordJrChallengePeriodFinishedActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.JR challenge period finished (actual)");

                    b.Property<string>("PlanningRecordLocalPlanningAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Local planning authority");

                    b.Property<string>("PlanningRecordLpaApplicationReference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.LPA application reference");

                    b.Property<bool?>("PlanningRecordNameManualOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Planning Record.Name - Manual overwrite?");

                    b.Property<string>("PlanningRecordPlanningAppraisalCompleted")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Planning appraisal completed");

                    b.Property<string>("PlanningRecordPlanningDecision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Planning decision");

                    b.Property<string>("PlanningRecordPlanningLeadComments")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("Planning Record.Planning Lead comments");

                    b.Property<string>("PlanningRecordPlanningPermissionLimitedToASpecificTimeAndExpiryPeriod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Planning permission limited to a specific time and expiry period");

                    b.Property<string>("PlanningRecordPlanningRisk")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Planning risk");

                    b.Property<bool?>("PlanningRecordPostcodeManualOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Planning Record.Postcode - Manual overwrite?");

                    b.Property<string>("PlanningRecordPostcodeOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Postcode of site");

                    b.Property<string>("PlanningRecordPrNameOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.PR_Name of site");

                    b.Property<DateTime?>("PlanningRecordPrPlanningPermissionExpiryDateActual")
                        .HasColumnType("date")
                        .HasColumnName("Planning Record.PR_Planning permission expiry date (actual)");

                    b.Property<string>("PlanningRecordSiteId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Site ID");

                    b.Property<string>("PlanningRecordStorePlanningRecordId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Store planning record ID");

                    b.Property<string>("PlanningRecordTypeOfPlanningRequired")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Planning Record.Type of planning required");

                    b.Property<string>("PlanningRecordWasPlanningSecuredInTimeForSchoolRequirements")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Planning Record.Was planning secured in time for school requirements?");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("Planning");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.PlanningQa", b =>
                {
                    b.Property<int>("AppealProcedureHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Appeal procedure highlight");

                    b.Property<int>("AppealRequiredHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Appeal required? highlight");

                    b.Property<int>("ClassCExpiryDateActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Class C expiry date (Actual) highlight");

                    b.Property<int>("DateAppealSubmittedActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date appeal submitted (actual) highlight");

                    b.Property<int>("DateAppealSubmittedForecastHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date appeal submitted (forecast) highlight");

                    b.Property<int>("DateAppealValidatedActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date appeal validated (actual) highlight");

                    b.Property<int>("DateLetterSentToLocalPlanningAuthorityActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date letter sent to local planning authority (Actual) highlight");

                    b.Property<int>("DateLetterSentToLocalPlanningAuthorityForecastHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date letter sent to local planning authority (Forecast) highlight");

                    b.Property<int>("DateOfAppealDecisionNoticeActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date of appeal decision notice (actual) highlight");

                    b.Property<int>("DateOfAppealDecisionNoticeForecastHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date of appeal decision notice (forecast) highlight");

                    b.Property<int>("DateOfPlanningDecisionNoticeActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date of planning decision notice (actual) highlight");

                    b.Property<int>("DateOfPlanningDecisionNoticeForecastHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date of planning decision notice (forecast) highlight");

                    b.Property<int>("DateOfStatutoryDeterminationActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date of statutory determination (actual) highlight");

                    b.Property<int>("DatePlanningApplicationSubmittedActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date planning application submitted (actual) highlight");

                    b.Property<int>("DatePlanningApplicationSubmittedForecastHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date planning application submitted (forecast) highlight");

                    b.Property<int>("DatePlanningApplicationValidatedActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Date planning application validated (actual) highlight");

                    b.Property<int>("LpaApplicationReferenceHighlight")
                        .HasColumnType("int")
                        .HasColumnName("LPA application reference highlight");

                    b.Property<string>("Month")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PlanningPermissionExpiryDateActualHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Planning permission expiry date (actual) highlight");

                    b.Property<int>("PlanningPermissionLimitedToASpecificTimeAndExpiryPeriodHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Planning permission limited to a specific time and expiry period highlight");

                    b.Property<int>("PlanningRiskHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Planning risk highlight");

                    b.Property<int>("TypeOfPlanningRequiredHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Type of planning required highlight");

                    b.ToTable("Planning_QA", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Po", b =>
                {
                    b.Property<string>("FinancialPlanningOptInToRpa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Planning.Opt in to RPA");

                    b.Property<DateTime?>("FinancialPlanningStartDateOfRpa")
                        .HasColumnType("date")
                        .HasColumnName("Financial Planning.Start date of RPA");

                    b.Property<string>("FinancialPlanningTypeOfRpaCover")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Financial Planning.Type of RPA cover");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding1stPdgGrantVariationDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.1st PDG grant variation date");

                    b.Property<string>("ProjectDevelopmentGrantFunding1stPdgGrantVariationLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.1st PDG grant variation link");

                    b.Property<string>("ProjectDevelopmentGrantFunding1stWriteOffApprovedInFsgBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.1st write off approved in FSG by");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding2ndDateWriteOffApprovedByFinanceBusinessPartners")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.2nd Date write off approved by Finance Business Partners");

                    b.Property<string>("ProjectDevelopmentGrantFunding2ndFinanceBusinessPartnerApprovalReceivedFrom")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.2nd Finance Business Partner Approval received from");

                    b.Property<string>("ProjectDevelopmentGrantFunding2ndLinkWriteOffPaperworkRepository")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.2nd Link write off paperwork repository");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding2ndPdgGrantVariationDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.2nd PDG grant variation date");

                    b.Property<string>("ProjectDevelopmentGrantFunding2ndPdgGrantVariationLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.2nd PDG grant variation link");

                    b.Property<string>("ProjectDevelopmentGrantFunding2ndWriteOffApprovedInFsgBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.2nd write off approved in FSG by");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding3rdDateWriteOffApprovedByFinanceBusinessPartners")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.3rd Date write off approved by Finance Business Partners");

                    b.Property<string>("ProjectDevelopmentGrantFunding3rdFinanceBusinessPartnerApprovalReceivedFrom")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.3rd Finance Business Partner Approval received from");

                    b.Property<string>("ProjectDevelopmentGrantFunding3rdLinkWriteOffPaperworkRepository")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.3rd Link write off paperwork repository");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding3rdPdgGrantVariationDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.3rd PDG grant variation date");

                    b.Property<string>("ProjectDevelopmentGrantFunding3rdPdgGrantVariationLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.3rd PDG grant variation link");

                    b.Property<string>("ProjectDevelopmentGrantFunding3rdWriteOffApprovedInFsgBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.3rd write off approved in FSG by");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFunding4thPdgGrantVariationDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.4th PDG grant variation date");

                    b.Property<string>("ProjectDevelopmentGrantFunding4thPdgGrantVariationLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.4th PDG grant variation link");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountApprovedFor1stWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount approved for 1st write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountApprovedFor2ndWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount approved for 2nd write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountApprovedFor3rdWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount approved for 3rd write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountCleared")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount Cleared");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf10thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 10th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf10thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 10th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf11thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 11th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf11thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 11th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf12thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 12th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf12thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 12th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf1stPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 1st payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf1stPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 1st payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf1stRefund")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 1st refund ");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf2ndPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 2nd payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf2ndPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 2nd payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf2ndRefund")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 2nd refund ");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf3rdPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 3rd payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf3rdPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 3rd payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf3rdRefund")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 3rd refund");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf4thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 4th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf4thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 4th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf5thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 5th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf5thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 5th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf6thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 6th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf6thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 6th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf7thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 7th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf7thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 7th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf8thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 8th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf8thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 8th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf9thPayment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 9th payment");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountOf9thPaymentDue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount of 9th payment due");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountRealised")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount Realised");

                    b.Property<string>("ProjectDevelopmentGrantFundingAmountToBeUnderwritten")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Amount to be Underwritten");

                    b.Property<string>("ProjectDevelopmentGrantFundingContingencyClearedRealised")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Contingency Cleared / Realised");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateNextFinancialStatementBudgetProfileIsDueBack")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date next financial statement / budget profile is due back");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf10thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 10th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf10thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 10th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf11thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 11th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf11thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 11th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf12thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 12th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf12thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 12th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf1stActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 1st actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf1stPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 1st payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf1stRefund")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 1st refund");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf1stWriteOff")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 1st write off");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf2ndActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 2nd actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf2ndPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 2nd payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf2ndRefund")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 2nd refund");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf2ndWriteOff")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 2nd write off");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf3rdActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 3rd actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf3rdPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 3rd payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf3rdRefund")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 3rd refund");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf3rdWriteOff")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 3rd write off");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf4thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 4th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf4thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 4th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf5thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 5th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf5thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 5th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf6thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 6th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf6thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 6th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf7thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 7th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf7thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 7th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf8thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 8th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf8thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 8th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf9thActualPayment")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 9th actual payment");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateOf9thPaymentDue")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date of 9th payment due");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDatePaymentsStopped")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date payments stopped");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateSop7ActionTaken")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date SOP7 action Taken");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateUnderwriteApproved")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date underwrite approved");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingDateWriteOffApprovedByFinanceBusinessPartners")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.Date write off approved by Finance Business Partners");

                    b.Property<string>("ProjectDevelopmentGrantFundingFinanceBusinessPartnerApprovalReceivedFrom")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Finance Business Partner Approval received from");

                    b.Property<string>("ProjectDevelopmentGrantFundingInitialGrantAllocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Initial grant allocation");

                    b.Property<string>("ProjectDevelopmentGrantFundingLinkWriteOffPaperworkRepository")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Link write off paperwork repository");

                    b.Property<bool?>("ProjectDevelopmentGrantFundingManuallyOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Project Development Grant Funding.Manually overwrite?");

                    b.Property<string>("ProjectDevelopmentGrantFundingPaymentAmountWrittenOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Payment amount written off");

                    b.Property<string>("ProjectDevelopmentGrantFundingPaymentsStopped")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Payments stopped");

                    b.Property<DateTime?>("ProjectDevelopmentGrantFundingPdgGrantLetterDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Development Grant Funding.PDG grant letter date");

                    b.Property<string>("ProjectDevelopmentGrantFundingPdgGrantLetterLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.PDG grant letter link");

                    b.Property<string>("ProjectDevelopmentGrantFundingPeriodOfUnderwrite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Period of Underwrite");

                    b.Property<bool?>("ProjectDevelopmentGrantFundingPo01ManuallyOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Project Development Grant Funding.PO01_Manually Overwrite");

                    b.Property<string>("ProjectDevelopmentGrantFundingReasonFor1stWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Reason for 1st write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingReasonFor2ndWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Reason for 2nd write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingReasonFor3rdWriteOff")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Reason for 3rd write off");

                    b.Property<string>("ProjectDevelopmentGrantFundingReasonForLiability")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Reason for Liability");

                    b.Property<string>("ProjectDevelopmentGrantFundingRevisedGrantAllocation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Revised grant allocation");

                    b.Property<string>("ProjectDevelopmentGrantFundingSop7ActionTaken")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.SOP7 Action Taken");

                    b.Property<string>("ProjectDevelopmentGrantFundingSopSupplierNumber")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Project Development Grant Funding.SOP Supplier Number");

                    b.Property<string>("ProjectDevelopmentGrantFundingStoppedPaymentsAuthorisedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Stopped payments authorised by");

                    b.Property<string>("ProjectDevelopmentGrantFundingTotalPaymentsMade")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Total payments made");

                    b.Property<string>("ProjectDevelopmentGrantFundingUnderwriteApprovedBy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Development Grant Funding.Underwrite approved by");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearFifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearFirstYear")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - First year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearFourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearSecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - Second year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearSeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearSixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityAcademicYearThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Academic year- Third year");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsPanY12Y14")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs PAN Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsPanY7Y11")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs PAN Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsPanYrY6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs PAN YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsViabilityY12Y14")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs viability Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsViabilityY7Y11")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs viability Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityAcceptedApplicationsVsViabilityYrY6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% accepted applications vs viability YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityAdmissionsBody")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Admissions body");

                    b.Property<string>("PupilNumbersAndCapacityCellA10Year8CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A10 Year 8 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA11Year9CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A11 Year 9 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA12Year10CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A12 Year 10 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA13Year11CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A13 Year 11 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA14Year12CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A14 Year 12 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA15Year13CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A15 Year 13 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA16Year14CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A16 Year 14 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA1NurseryCurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A1 Nursery - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA2ReceptionCurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A2 Reception - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA3Year1CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A3 Year 1 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA4Year2CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A4 Year 2 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA5Year3CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A5 Year 3 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA6Year4CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A6 Year 4 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA7Year5CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A7 Year 5 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA8Year6CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A8 Year 6 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellA9Year7CurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_A9 Year 7 - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellB10Year8FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B10 Year 8 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB11Year9FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B11 Year 9 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB12Year10FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B12 Year 10 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB13Year11FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B13 Year 11 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB14Year12FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B14 Year 12 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB15Year13FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B15 Year 13 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB16Year14FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B16 Year 14 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB1NurseryFirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B1 Nursery - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB2ReceptionFirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B2 Reception - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB3Year1FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B3 Year 1 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB4Year2FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B4 Year 2 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB5Year3FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B5 Year 3 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB6Year4FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B6 Year 4 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB7Year5FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B7 Year 5 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB8Year6FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B8 Year 6 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellB9Year7FirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_B9 Year 7 - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellC10Year8SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C10 Year 8 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC11Year9SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C11 Year 9 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC12Year10SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C12 Year 10 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC13Year11SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C13 Year 11 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC14Year12SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C14 Year 12 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC15Year13SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C15 Year 13 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC16Year14SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C16 Year 14 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC1NurserySecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C1 Nursery - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC2ReceptionSecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C2 Reception - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC3Year1SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C3 Year 1 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC4Year2SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C4 Year 2 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC5Year3SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C5 Year 3 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC6Year4SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C6 Year 4 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC7Year5SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C7 Year 5 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC8Year6SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C8 Year 6 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellC9Year7SecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_C9 Year 7 - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellD10Year8ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D10 Year 8 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD11Year9ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D11 Year 9 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD12Year10ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D12 Year 10 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD13Year11ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D13 Year 11 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD14Year12ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D14 Year 12 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD15Year13ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D15 Year 13 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD16Year14ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D16 Year 14 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD1NurseryThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D1 Nursery - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD2ReceptionThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D2 Reception - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD3Year1ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D3 Year 1 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD4Year2ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D4 Year 2 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD5Year3ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D5 Year 3 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD6Year4ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D6 Year 4 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD7Year5ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D7 Year 5 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD8Year6ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D8 Year 6 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellD9Year7ThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_D9 Year 7 - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellE10Year8FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E10 Year 8 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE11Year9FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E11 Year 9 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE12Year10FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E12 Year 10 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE13Year11FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E13 Year 11 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE14Year12FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E14 Year 12 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE15Year13FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E15 Year 13 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE16Year14FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E16 Year 14 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE1NurseryFourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E1 Nursery - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE2ReceptionFourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E2 Reception - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE3Year1FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E3 Year 1 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE4Year2FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E4 Year 2 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE5Year3FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E5 Year 3 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE6Year4FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E6 Year 4 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE7Year5FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E7 Year 5 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE8Year6FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E8 Year 6 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellE9Year7FourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_E9 Year 7 - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF10Year8FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F10 Year 8 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF11Year9FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F11 Year 9 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF12Year10FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F12 Year 10 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF13Year11FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F13 Year 11 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF14Year12FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F14 Year 12 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF15Year13FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F15 Year 13 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF16Year14FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F16 Year 14 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF1NurseryFifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F1 Nursery - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF2ReceptionFifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F2 Reception - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF3Year1FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F3 Year 1 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF4Year2FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F4 Year 2 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF5Year3FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F5 Year 3 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF6Year4FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F6 Year 4 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF7Year5FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F7 Year 5 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF8Year6FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F8 Year 6 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellF9Year7FifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_F9 Year 7 - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG10Year8SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G10 Year 8 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG11Year9SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G11 Year 9 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG12Year10SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G12 Year 10 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG13Year11SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G13 Year 11 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG14Year12SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G14 Year 12 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG15Year13SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G15 Year 13 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG16Year14SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G16 Year 14 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG1NurserySixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G1 Nursery - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG2ReceptionSixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G2 Reception - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG3Year1SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G3 Year 1 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG4Year2SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G4 Year 2 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG5Year3SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G5 Year 3 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG6Year4SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G6 Year 4 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG7Year5SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G7 Year 5 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG8Year6SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G8 Year 6 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellG9Year7SixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_G9 Year 7 - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellH10Year8SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H10 Year 8 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH11Year9SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H11 Year 9 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH12Year10SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H12 Year 10 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH13Year11SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H13 Year 11 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH14Year12SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H14 Year 12 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH15Year13SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H15 Year 13 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH16Year14SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H16 Year 14 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH1NurserySeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H1 Nursery - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH2ReceptionSeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H2 Reception - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH3Year1SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H3 Year 1 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH4Year2SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H4 Year 2 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH5Year3SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H5 Year 3 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH6Year4SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H6 Year 4 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH7Year5SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H7 Year 5 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH8Year6SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H8 Year 6 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellH9Year7SeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_H9 Year 7 - Seventh year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalATotalCurrentPupilNumbersIfAlreadyOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalA Total - current pupil numbers (if already open)");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalBTotalFirstYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalB Total - First year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalCTotalSecondYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalC Total - Second year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalDTotalThirdYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalD Total - Third year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalETotalFourthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalE Total - Fourth year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalFTotalFifthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalF Total - Fifth year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalGTotalSixthYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalG Total - Sixth year");

                    b.Property<string>("PupilNumbersAndCapacityCellTotalHTotalSeventhYear")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Cell_TotalH Total - Seventh year");

                    b.Property<bool?>("PupilNumbersAndCapacityManualOverwrite")
                        .HasColumnType("bit")
                        .HasColumnName("Pupil numbers and capacity.Manual overwrite?");

                    b.Property<string>("PupilNumbersAndCapacityMinimumFirstYearRecruitmentForViabilityTotal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Minimum first year recruitment for viability Total");

                    b.Property<string>("PupilNumbersAndCapacityMinimumFirstYearRecruitmentForViabilityY12Y14")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.Minimum first year recruitment for viability Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityMinimumFirstYearRecruitmentForViabilityY7Y11")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.Minimum first year recruitment for viability Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityMinimumFirstYearRecruitmentForViabilityYrY6")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.Minimum first year recruitment for viability YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsAcceptedTotal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.No. applications accepted Total");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsAcceptedY12Y14")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications accepted Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsAcceptedY7Y11")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications accepted Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsAcceptedYrY6")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications accepted YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsReceivedTotal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.No. applications received Total");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsReceivedY12Y14")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications received Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsReceivedY7Y11")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications received Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityNoApplicationsReceivedYrY6")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.No. applications received YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityNurseryUnder5s")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Nursery (under 5s)");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsPanY12Y14")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs PAN Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsPanY7Y11")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs PAN Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsPanYrY6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs PAN YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsViabilityY12Y14")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs viability Y12-Y14");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsViabilityY7Y11")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs viability Y7-Y11");

                    b.Property<string>("PupilNumbersAndCapacityReceivedApplicationsVsViabilityYrY6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.% received applications vs viability YR-Y6");

                    b.Property<string>("PupilNumbersAndCapacitySpecialistResourceProvisionAp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Specialist Resource Provision - AP");

                    b.Property<string>("PupilNumbersAndCapacitySpecialistResourceProvisionSpecial")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Specialist Resource Provision - Special");

                    b.Property<string>("PupilNumbersAndCapacityTotalOfCapacityTotals")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total of capacity totals");

                    b.Property<string>("PupilNumbersAndCapacityTotalPanPost16")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total PAN: post-16");

                    b.Property<string>("PupilNumbersAndCapacityTotalPanPre16")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total PAN: pre-16");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16A")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 A");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16B")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 B");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16C")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 C");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16D")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 D");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16E")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 E");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16F")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 F");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16G")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 G");

                    b.Property<string>("PupilNumbersAndCapacityTotalPost16H")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total post-16 H");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16A")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 A");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16B")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 B");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16C")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 C");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16D")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 D");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16E")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 E");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16F")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 F");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16G")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 G");

                    b.Property<string>("PupilNumbersAndCapacityTotalPre16H")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Pupil numbers and capacity.Total pre-16 H");

                    b.Property<string>("PupilNumbersAndCapacityY10Pan")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Y10 PAN");

                    b.Property<string>("PupilNumbersAndCapacityY12Pan")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.Y12 PAN");

                    b.Property<string>("PupilNumbersAndCapacityY12Y14Post16Capacity")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Y12-Y14 (post-16) capacity");

                    b.Property<string>("PupilNumbersAndCapacityY7Pan")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Y7 PAN");

                    b.Property<string>("PupilNumbersAndCapacityY7Y11Capacity")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Y7-Y11 capacity");

                    b.Property<string>("PupilNumbersAndCapacityYOtherPanPost16")
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("varchar(3)")
                        .HasColumnName("Pupil numbers and capacity.Y other PAN post-16");

                    b.Property<string>("PupilNumbersAndCapacityYOtherPanPre16")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.Y other PAN pre-16");

                    b.Property<string>("PupilNumbersAndCapacityYrPan")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.YR PAN");

                    b.Property<string>("PupilNumbersAndCapacityYrY11Pre16Capacity")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.YR-Y11 (pre-16) capacity");

                    b.Property<string>("PupilNumbersAndCapacityYrY6Capacity")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Pupil numbers and capacity.YR-Y6 capacity");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("PO", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Porf", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("PurchaseOrderRequestFormPorfGlCode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.PORF GL code");

                    b.Property<string>("PurchaseOrderRequestFormPorfId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.PORF ID");

                    b.Property<DateTime?>("PurchaseOrderRequestFormPurchaseOrderCreatedDate")
                        .HasColumnType("date")
                        .HasColumnName("Purchase Order Request Form.Purchase Order created date");

                    b.Property<string>("PurchaseOrderRequestFormPurchaseOrderNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.Purchase Order number");

                    b.Property<string>("PurchaseOrderRequestFormPurchaseOrderRequestFormTotalValueExclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.Purchase Order Request Form Total value (excl VAT)");

                    b.Property<string>("PurchaseOrderRequestFormPurchaseOrderRequestFormVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.Purchase Order Request Form VAT");

                    b.Property<string>("PurchaseOrderRequestFormPurchaseOrderRequestFormVendor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Purchase Order Request Form.Purchase Order Request Form - Vendor");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("PORF", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Pr", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("PreregistrationContactNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Preregistration.Contact notes");

                    b.Property<DateTime?>("PreregistrationDateOfLastContactWithApplicant")
                        .HasColumnType("date")
                        .HasColumnName("Preregistration.Date of last contact with applicant");

                    b.Property<DateTime?>("PreregistrationDateSubmitted")
                        .HasColumnType("date")
                        .HasColumnName("Preregistration.Date submitted");

                    b.Property<string>("PreregistrationDoYouAlreadyRunOneOrMoreFreeSchoolsAcademiesOrHaveAnyInThePipeline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Do you already run one or more free schools/academies or have any in the pipeline? ");

                    b.Property<string>("PreregistrationEmailOfLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Email of lead applicant");

                    b.Property<string>("PreregistrationEmailOfPersonSubmittingFormIfNotLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Email of person submitting form (if not lead applicant)");

                    b.Property<string>("PreregistrationHowManyFreeSchoolsAreYouApplyingForInThisWave")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.How many free schools are you applying for in this wave?");

                    b.Property<string>("PreregistrationIsThisAReApplicationIEAnApplicationThatWasPreviouslyUnsuccessful")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Is this a re-application i.e. an application that was previously unsuccessful? ");

                    b.Property<string>("PreregistrationLeadSponsorId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Preregistration.Lead sponsor ID");

                    b.Property<string>("PreregistrationLeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Lead sponsor name");

                    b.Property<string>("PreregistrationNameOfLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Name of lead applicant");

                    b.Property<string>("PreregistrationNameOfPersonSubmittingFormIfNotLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Name of person submitting form (if not lead applicant)");

                    b.Property<string>("PreregistrationProposedTrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Proposed trust name");

                    b.Property<string>("PreregistrationReferenceNumber")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Reference number");

                    b.Property<string>("PreregistrationStaticLinkToTrustPageOnKim")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Static link to trust page on KIM");

                    b.Property<string>("PreregistrationTelephoneNumberOfLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Telephone number of lead applicant");

                    b.Property<string>("PreregistrationTelephoneOfPersonSubmittingFormIfNotLeadApplicant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Telephone of person submitting form (if not lead applicant)");

                    b.Property<string>("PreregistrationTrustId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Preregistration.Trust ID");

                    b.Property<string>("PreregistrationTrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Trust name");

                    b.Property<string>("PreregistrationTypeOfGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Type of group");

                    b.Property<string>("PreregistrationTypeOfGroupOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Type of group other");

                    b.Property<string>("PreregistrationWhichWaveDoYouIntendToApplyFor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Preregistration.Which wave do you intend to apply for?");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("PR", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Property", b =>
                {
                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("SiteAcquisitionInNameOfDclg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Acquisition in name of DCLG");

                    b.Property<string>("SiteAcquisitionType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Acquisition type");

                    b.Property<string>("SiteAcquisitionVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Acquisition VAT");

                    b.Property<string>("SiteAddressOfSite")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site.Address of site");

                    b.Property<string>("SiteAmountAboveRbv")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Site.Amount above RBV");

                    b.Property<string>("SiteAnnualLeaseCostRent")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Annual lease cost (rent)");

                    b.Property<string>("SiteAreaOfExistingBuildingM2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Area of existing building (m2)");

                    b.Property<string>("SiteAreaOfExistingSiteAcres")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Area of existing site (acres)");

                    b.Property<string>("SiteBuildingType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Building type");

                    b.Property<string>("SiteBuildingValueIaS17InPlaceOfRbv")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Building value (IA S17 in place of RBV)");

                    b.Property<string>("SiteChargeRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Charge required");

                    b.Property<DateTime?>("SiteDateHeadsOfTermsAgreedActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date heads of terms agreed (actual)");

                    b.Property<DateTime?>("SiteDateHeadsOfTermsAgreedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date heads of terms agreed (forecast)");

                    b.Property<DateTime?>("SiteDateOfChargeActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of charge (actual)");

                    b.Property<DateTime?>("SiteDateOfCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of completion (actual)");

                    b.Property<DateTime?>("SiteDateOfCompletionForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of completion (forecast)");

                    b.Property<DateTime?>("SiteDateOfExchangeActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of exchange (actual)");

                    b.Property<DateTime?>("SiteDateOfExchangeForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of exchange (forecast)");

                    b.Property<DateTime?>("SiteDateOfHmtPaperActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of HMT paper (actual)");

                    b.Property<DateTime?>("SiteDateOfPreFundingAgreementSideLetterActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date of pre-funding agreement side letter (actual)");

                    b.Property<DateTime?>("SiteDateRbvRequiredActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date RBV required (actual)");

                    b.Property<DateTime?>("SiteDateRbvSubmittedActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date RBV submitted (actual)");

                    b.Property<DateTime?>("SiteDateSection77ApprovedActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Date Section 77 approved (actual)");

                    b.Property<DateTime?>("SiteDclgLeaseToTrustDateOfCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.DCLG lease to Trust : Date of completion (actual)");

                    b.Property<DateTime?>("SiteDclgLeaseToTrustDateOfExchangeActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.DCLG lease to Trust : Date of exchange (actual)");

                    b.Property<string>("SiteDclgLeaseToTrustIfPurchasedInNameOfDclg")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.DCLG lease to Trust, if purchased in name of DCLG");

                    b.Property<string>("SiteDecisionMakingFramework")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Decision making framework");

                    b.Property<string>("SiteDetailOfBuildingTypeOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Detail of building type - Other");

                    b.Property<string>("SiteDetailsOfVariationToTheLease")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Details of variation to the lease");

                    b.Property<string>("SiteDifference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.% difference");

                    b.Property<string>("SiteDisposalStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Disposal status");

                    b.Property<string>("SiteDisposalVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Disposal VAT");

                    b.Property<DateTime?>("SiteEndDateOfSchoolOccupationActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.End date of school occupation (actual)");

                    b.Property<DateTime?>("SiteEndDateOfSchoolOccupationForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.End date of school occupation (forecast)");

                    b.Property<string>("SiteExistingUseClass")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Existing use class");

                    b.Property<string>("SiteGreenBookNpvLeaseCost")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Green book NPV lease cost");

                    b.Property<string>("SiteHmtPaperComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.HMT paper comments");

                    b.Property<string>("SiteHmtPaperRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.HMT paper required");

                    b.Property<string>("SiteIaS17Required")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.IA S17 required");

                    b.Property<string>("SiteIsThereAPlanningLongStopDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Is there a planning long stop date?");

                    b.Property<string>("SiteLandValueIaS17InPlaceOfRbv")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Land value (IA S17 in place of RBV)");

                    b.Property<string>("SiteLandlordName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Landlord Name");

                    b.Property<DateTime?>("SiteLeaseEndDateActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Lease end date (actual)");

                    b.Property<DateTime?>("SiteLeaseStartDateActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Lease start date (actual)");

                    b.Property<string>("SiteLegalManagerComments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site.Legal manager comments");

                    b.Property<string>("SiteLengthOfLeaseYears")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Length of lease (years)");

                    b.Property<string>("SiteListing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Listing");

                    b.Property<string>("SiteLocatEdCommissionReference")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.LocatED commission reference");

                    b.Property<string>("SiteLocatEdDelivery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.LocatED delivery");

                    b.Property<string>("SiteMaximumCapacityOfTemporarySiteNoOfPupils")
                        .HasMaxLength(6)
                        .IsUnicode(false)
                        .HasColumnType("varchar(6)")
                        .HasColumnName("Site.Maximum capacity of temporary site (no of pupils)");

                    b.Property<string>("SiteNameOfPurchaser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Name of purchaser");

                    b.Property<string>("SiteNameOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Name of site");

                    b.Property<string>("SiteNetCostOfAcquisition")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Net cost of acquisition");

                    b.Property<string>("SiteNetValueOfDisposal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Net value of disposal");

                    b.Property<string>("SiteNumberOfStoreys")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Number of storeys");

                    b.Property<string>("SiteOtherComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Other comments");

                    b.Property<DateTime?>("SitePlanningLongStopDateActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Planning long stop date (actual)");

                    b.Property<string>("SitePleaseStateReasonIfMoreThanOneTenureTypeSelected")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Please state reason if more than one tenure type selected");

                    b.Property<string>("SitePostcodeOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Postcode of site");

                    b.Property<string>("SitePreFundingAgreementSideLetterLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Pre-funding agreement side letter link");

                    b.Property<string>("SitePreFundingAgreementSideLetterRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Pre-funding agreement side letter required");

                    b.Property<string>("SitePremiumIfApplicable")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Premium (if applicable)");

                    b.Property<string>("SitePropertyAdviserComments")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Site.Property adviser comments");

                    b.Property<string>("SiteRbvRequired")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.RBV required");

                    b.Property<string>("SiteRbvStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.RBV status");

                    b.Property<string>("SiteRbvValue")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Site.RBV value");

                    b.Property<string>("SiteS106Funding")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.S106 Funding");

                    b.Property<string>("SiteSection77Required")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Section 77 required");

                    b.Property<DateTime?>("SiteSiteDisposalDateOfCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Site disposal date of completion (actual)");

                    b.Property<DateTime?>("SiteSiteDisposalDateOfExchangeActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Site disposal date of exchange (actual)");

                    b.Property<string>("SiteSiteId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Site ID");

                    b.Property<DateTime?>("SiteSiteIdentifiedActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Site identified (actual)");

                    b.Property<DateTime?>("SiteSiteIdentifiedForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.Site identified (forecast)");

                    b.Property<string>("SiteSiteSchoolCurrentlyOperatingFrom")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Site school currently operating from");

                    b.Property<string>("SiteSiteStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Site Status");

                    b.Property<DateTime?>("SiteStartDateOfSchoolOccupationActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Start date of school occupation (actual)");

                    b.Property<DateTime?>("SiteStartDateOfSchoolOccupationForecast")
                        .HasColumnType("date")
                        .HasColumnName("Site.Start date of school occupation (forecast)");

                    b.Property<string>("SiteTenure")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Site.Tenure");

                    b.Property<string>("SiteTypeOfSite")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Type of site");

                    b.Property<string>("SiteTypeOfSiteDisposal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Type of site disposal");

                    b.Property<string>("SiteVariationToTheLease")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Variation to the lease");

                    b.Property<DateTime?>("SiteVariationToTheLeaseDateOfCompletionActual")
                        .HasColumnType("date")
                        .HasColumnName("Site.Variation to the lease : Date of completion (actual)");

                    b.Property<string>("SiteVendorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Site.Vendor name");

                    b.Property<string>("Tos")
                        .IsRequired()
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("varchar(9)")
                        .HasColumnName("TOS");

                    b.HasKey("Rid");

                    b.ToTable("Property");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.PropertyQa", b =>
                {
                    b.Property<int>("AddressOfSite")
                        .HasColumnType("int")
                        .HasColumnName("Address of site");

                    b.Property<int>("DateOfCompletionForecast")
                        .HasColumnType("int")
                        .HasColumnName("Date of completion (forecast)");

                    b.Property<int>("DateOfExchangeActual")
                        .HasColumnType("int")
                        .HasColumnName("Date of exchange (actual)");

                    b.Property<int>("DateOfExchangeForecast")
                        .HasColumnType("int")
                        .HasColumnName("Date of exchange (forecast)");

                    b.Property<int>("DateOfHeadsOfTermsAgreedActual")
                        .HasColumnType("int")
                        .HasColumnName("Date of heads of terms agreed (actual)");

                    b.Property<int>("DateOfHeadsOfTermsAgreedForecast")
                        .HasColumnType("int")
                        .HasColumnName("Date of heads of terms agreed (forecast)");

                    b.Property<int>("EsfaCapitalProjectManager")
                        .HasColumnType("int")
                        .HasColumnName("ESFA Capital project manager");

                    b.Property<int>("EsfaPropertyLead")
                        .HasColumnType("int")
                        .HasColumnName("ESFA property lead");

                    b.Property<int>("EsfaRegionalPropertyLead")
                        .HasColumnType("int")
                        .HasColumnName("ESFA regional property lead");

                    b.Property<int>("HeadOfRegion")
                        .HasColumnType("int")
                        .HasColumnName("Head of Region");

                    b.Property<int>("LegalManager")
                        .HasColumnType("int")
                        .HasColumnName("Legal manager");

                    b.Property<int>("LocatEdAcquisitionManager")
                        .HasColumnType("int")
                        .HasColumnName("LocatED acquisition manager");

                    b.Property<int>("LocatEdCommissionReference")
                        .HasColumnType("int")
                        .HasColumnName("LocatED commission reference");

                    b.Property<int>("LocatEdDelivery")
                        .HasColumnType("int")
                        .HasColumnName("LocatED delivery");

                    b.Property<string>("Month")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NameOfSite")
                        .HasColumnType("int")
                        .HasColumnName("Name of site");

                    b.Property<int>("PleaseStateReasonIfMoreThanOneTenureTypeSelected")
                        .HasColumnType("int")
                        .HasColumnName("Please state reason if more than one tenure type selected");

                    b.Property<int>("PostcodeOfSite")
                        .HasColumnType("int")
                        .HasColumnName("Postcode of site");

                    b.Property<int>("ProjectDirector")
                        .HasColumnType("int")
                        .HasColumnName("Project director");

                    b.Property<int>("SiteIdentifiedActual")
                        .HasColumnType("int")
                        .HasColumnName("Site identified (actual)");

                    b.Property<int>("SiteIdentifiedForecast")
                        .HasColumnType("int")
                        .HasColumnName("Site identified (forecast)");

                    b.Property<int>("TenureHighlight")
                        .HasColumnType("int")
                        .HasColumnName("Tenure highlight");

                    b.ToTable("Property_QA", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Rag", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("RagRatingsAllAssessmentConditionsMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.All assessment conditions met");

                    b.Property<string>("RagRatingsAssessmentCondition1")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 1");

                    b.Property<string>("RagRatingsAssessmentCondition2")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 2");

                    b.Property<string>("RagRatingsAssessmentCondition3")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 3");

                    b.Property<string>("RagRatingsAssessmentCondition4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 4");

                    b.Property<string>("RagRatingsAssessmentCondition5")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 5");

                    b.Property<string>("RagRatingsAssessmentCondition6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 6");

                    b.Property<string>("RagRatingsAssessmentCondition7")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 7");

                    b.Property<string>("RagRatingsAssessmentCondition8")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Assessment condition 8");

                    b.Property<string>("RagRatingsEducationRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Education RAG");

                    b.Property<string>("RagRatingsFinanceRagSummary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Rag Ratings.Finance RAG summary");

                    b.Property<string>("RagRatingsFinancesRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Finances RAG rating");

                    b.Property<string>("RagRatingsGovernanceAndSuitabilityRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Governance and Suitability RAG rating");

                    b.Property<string>("RagRatingsHasCondition1BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 1 been met?");

                    b.Property<string>("RagRatingsHasCondition2BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 2 been met?");

                    b.Property<string>("RagRatingsHasCondition3BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 3 been met?");

                    b.Property<string>("RagRatingsHasCondition4BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 4 been met?");

                    b.Property<string>("RagRatingsHasCondition5BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 5 been met?");

                    b.Property<string>("RagRatingsHasCondition6BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 6 been met?");

                    b.Property<string>("RagRatingsHasCondition7BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 7 been met?");

                    b.Property<string>("RagRatingsHasCondition8BeenMet")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Has condition 8 been met?");

                    b.Property<string>("RagRatingsInclusivityIssue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Inclusivity Issue");

                    b.Property<string>("RagRatingsLinkToRiskAssessmentMatrix")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Link to Risk Assessment Matrix");

                    b.Property<string>("RagRatingsLocalContextRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Local context RAG rating");

                    b.Property<string>("RagRatingsOverallRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Overall RAG rating");

                    b.Property<string>("RagRatingsOverallRagSummary")
                        .HasMaxLength(5000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("Rag Ratings.Overall RAG summary");

                    b.Property<string>("RagRatingsOverallRomRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Overall ROM RAG rating");

                    b.Property<string>("RagRatingsPipelineFreeSchoolsJointRiskCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Pipeline Free Schools Joint Risk Category");

                    b.Property<string>("RagRatingsProjectRecommendation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Project recommendation");

                    b.Property<string>("RagRatingsPupilRecruitmentRagRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Pupil recruitment RAG rating");

                    b.Property<string>("RagRatingsReasonForJointRiskCategory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Rag Ratings.Reason for Joint Risk Category");

                    b.Property<string>("RagRatingsRscStocktakeRecommendationSummary")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Rag Ratings.RSC stocktake recommendation summary");

                    b.Property<string>("RagRatingsSummaryOfInclusivityIssue")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("Rag Ratings.Summary of inclusivity issue");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.ToTable("RAG", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.RagtempBudget", b =>
                {
                    b.Property<string>("ConstructionCostsInclPassiveIctPlanningObligationsExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Construction Costs (incl passive ICT / Planning Obligations) excl VAT Cost to date");

                    b.Property<string>("ConstructionCostsInclPassiveIctPlanningObligationsExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Construction Costs (incl passive ICT / Planning Obligations) excl VAT Forecast");

                    b.Property<string>("FfEExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FF & E (excl VAT) Cost to date");

                    b.Property<string>("FfEExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FF & E (excl VAT) Forecast");

                    b.Property<string>("Fscode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSCode");

                    b.Property<string>("IctActivesExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Actives (excl VAT) Cost to date");

                    b.Property<string>("IctActivesExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Actives (excl VAT) Forecast");

                    b.Property<string>("IctBroadbandExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Broadband (excl VAT) Cost to date");

                    b.Property<string>("IctBroadbandExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Broadband (excl VAT) Forecast");

                    b.Property<string>("IctHardwareEquipmentExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Hardware Equipment (excl VAT) Cost to date");

                    b.Property<string>("IctHardwareEquipmentExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ICT Hardware Equipment (excl VAT) Forecast");

                    b.Property<string>("LegalFeesConstructionInclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Legal fees - construction  (incl VAT) Comments");

                    b.Property<string>("LegalFeesConstructionInclVatCostUptoDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Legal fees - construction  (incl VAT) Cost upto date");

                    b.Property<string>("LegalFeesConstructionInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Legal fees - construction  (incl VAT) Forecast");

                    b.Property<string>("PermanentBudgetRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent Budget RAG");

                    b.Property<string>("PermanentConstructionCostsInclPassiveIctPlanningObligationsExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent Construction Costs (incl passive ICT / Planning Obligations) excl VAT Comments");

                    b.Property<string>("PermanentConstructionSubTotalComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent Construction sub total comments");

                    b.Property<string>("PermanentFfEExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent FF & E (excl VAT) Comments");

                    b.Property<string>("PermanentIctActivesExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent  ICT Actives (excl VAT) Comments");

                    b.Property<string>("PermanentIctBroadbandExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent  ICT Broadband (excl VAT) Comments");

                    b.Property<string>("PermanentIctDecantCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent ICT Decant Cost to date");

                    b.Property<string>("PermanentIctDecantExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent ICT Decant (excl VAT) Comments");

                    b.Property<string>("PermanentIctDecantExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent ICT Decant (excl VAT) forecast");

                    b.Property<string>("PermanentIctHardwareEquipmentExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent ICT Hardware Equipment (excl VAT) Comments");

                    b.Property<string>("PermanentTaFeesInclVat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent TA Fees (Incl VAT)");

                    b.Property<string>("PermanentTaSurveysInclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Permanent TA Surveys (Incl VAT Comments");

                    b.Property<string>("TaFeesInclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Fees (Incl VAT) Cost to date");

                    b.Property<string>("TaFeesInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Fees (Incl VAT) Forecast");

                    b.Property<string>("TaSurveysInclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Surveys (Incl VAT) Cost to date");

                    b.Property<string>("TaSurveysInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Surveys (Incl VAT) Forecast");

                    b.Property<string>("TemporaryBudgetRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Budget RAG");

                    b.Property<string>("TemporaryConstructionCostsInclPassiveIctPlanningObligationsExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Construction Costs (incl passive ICT / Planning Obligations) excl VAT Comments");

                    b.Property<string>("TemporaryConstructionCostsInclPassiveIctPlanningObligationsExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Construction Costs (incl passive ICT / Planning Obligations) excl VAT Cost to Date");

                    b.Property<string>("TemporaryConstructionCostsInclPassiveIctPlanningObligationsExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Construction Costs (incl passive ICT / Planning Obligations) excl VAT Forecast");

                    b.Property<string>("TemporaryConstructionSubTotalComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Construction sub total comments");

                    b.Property<string>("TemporaryFfEExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary FF & E (excl VAT) Comments");

                    b.Property<string>("TemporaryFfEExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary FF & E (excl VAT) Cost to Date");

                    b.Property<string>("TemporaryFfEExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary FF & E (excl VAT) Forecast");

                    b.Property<string>("TemporaryIctActivesExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Actives (excl VAT) Comments");

                    b.Property<string>("TemporaryIctActivesExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Actives (excl VAT) Cost to date");

                    b.Property<string>("TemporaryIctActivesExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary ICT Actives (excl VAT) Forecast");

                    b.Property<string>("TemporaryIctBroadbandExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Broadband (excl VAT) Comments");

                    b.Property<string>("TemporaryIctBroadbandExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Broadband (excl VAT) Cost to date");

                    b.Property<string>("TemporaryIctBroadbandExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Broadband (excl VAT) Forecast");

                    b.Property<string>("TemporaryIctDecantExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Decant (excl VAT) Comments");

                    b.Property<string>("TemporaryIctDecantExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Decant (excl VAT) Cost to date");

                    b.Property<string>("TemporaryIctDecantExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Decant (excl VAT) Forecast");

                    b.Property<string>("TemporaryIctHardwareEquipmentExclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Hardware Equipment (excl VAT) Comments");

                    b.Property<string>("TemporaryIctHardwareEquipmentExclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Hardware Equipment (excl VAT) Cost to date");

                    b.Property<string>("TemporaryIctHardwareEquipmentExclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary  ICT Hardware Equipment (excl VAT) Forecast");

                    b.Property<string>("TemporaryLegalFeesConstructionInclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Legal fees - construction  (incl VAT) Comments");

                    b.Property<string>("TemporaryLegalFeesConstructionInclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Legal fees - construction  (incl VAT) Cost to date");

                    b.Property<string>("TemporaryLegalFeesConstructionInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary Legal fees - construction  (incl VAT) Forecast");

                    b.Property<string>("TemporaryTaFeesInclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Fees (Incl VAT) Cost to date");

                    b.Property<string>("TemporaryTaFeesInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Fees (Incl VAT) Forecast");

                    b.Property<string>("TemporaryTaFeesInclVatForecastComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Fees (Incl VAT) Forecast Comments");

                    b.Property<string>("TemporaryTaSurveysInclVatComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Surveys (Incl VAT) Comments ");

                    b.Property<string>("TemporaryTaSurveysInclVatCostToDate")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Surveys (Incl VAT) Cost to date");

                    b.Property<string>("TemporaryTaSurveysInclVatForecast")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Temporary TA Surveys (Incl VAT) Forecast");

                    b.ToTable("RAGTEMP_BUDGET", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.RagtempRatings", b =>
                {
                    b.Property<string>("AccidentOnSiteInThisMonthReportedToEfa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Accident on site in this month reported to EFA");

                    b.Property<string>("Fscode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("FSCode");

                    b.Property<string>("OverallRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Overall RAG");

                    b.Property<string>("TaOverallSiteRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Overall Site RAG");

                    b.Property<string>("TaOverallSiteRagComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Overall Site RAG Comments");

                    b.Property<string>("TaPermanentSiteRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Permanent Site RAG");

                    b.Property<string>("TaPermanentSiteRagComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA Permanent Site RAG Comments");

                    b.Property<string>("TaSeptemberSiteRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA September Site RAG");

                    b.Property<string>("TaSeptemberSiteRagComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TA September Site RAG Comments");

                    b.Property<string>("TatemporarySiteRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TATemporary Site RAG");

                    b.Property<string>("TatemporarySiteRagComments")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("TATemporary Site RAG Comments");

                    b.ToTable("RAGTEMP_RATINGS", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.RegionalFramework", b =>
                {
                    b.Property<string>("HighValueBandLot")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("High Value Band Lot");

                    b.Property<string>("LocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local authority");

                    b.Property<string>("LowValueBandLot")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Low Value Band Lot");

                    b.Property<string>("MediumValueBandLot")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Medium Value Band Lot");

                    b.Property<string>("RscRegions")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RSC Regions");

                    b.ToTable("Regional Framework", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.ReportServerUrl", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("ReportName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("report_name");

                    b.Property<string>("Servername")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("servername");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("url");

                    b.ToTable("Report_Server_Url", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Tally", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    b.ToTable("Tally");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.TechnicalQa", b =>
                {
                    b.Property<int>("Bim")
                        .HasColumnType("int")
                        .HasColumnName("BIM");

                    b.Property<int>("ComgdIssued")
                        .HasColumnType("int")
                        .HasColumnName("COMGD Issued");

                    b.Property<int>("ContractAwardValue")
                        .HasColumnType("int")
                        .HasColumnName("Contract Award Value £");

                    b.Property<int>("ContractBudgetValue")
                        .HasColumnType("int")
                        .HasColumnName("Contract Budget Value £");

                    b.Property<int>("ContractProcurementStatus")
                        .HasColumnType("int")
                        .HasColumnName("Contract Procurement Status");

                    b.Property<int>("ContractingParty")
                        .HasColumnType("int")
                        .HasColumnName("Contracting Party");

                    b.Property<int>("Contractor")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryParty")
                        .HasColumnType("int")
                        .HasColumnName("Delivery Party");

                    b.Property<int>("EnterIntoMainContractActual")
                        .HasColumnType("int")
                        .HasColumnName("Enter into Main Contract Actual");

                    b.Property<int>("FeasibilityReportApproved")
                        .HasColumnType("int")
                        .HasColumnName("Feasibility Report Approved");

                    b.Property<int>("FeasibiltyReportStartDate")
                        .HasColumnType("int")
                        .HasColumnName("Feasibilty Report Start Date");

                    b.Property<int>("FinalContractValue")
                        .HasColumnType("int")
                        .HasColumnName("Final Contract Value £");

                    b.Property<int>("Gifa")
                        .HasColumnType("int")
                        .HasColumnName("GIFA");

                    b.Property<string>("Month")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("PcCertificateIssuedActual")
                        .HasColumnType("int")
                        .HasColumnName("PC Certificate Issued Actual");

                    b.Property<int>("ProcurementRoute")
                        .HasColumnType("int")
                        .HasColumnName("Procurement Route");

                    b.Property<int>("ProcurementStartActual")
                        .HasColumnType("int")
                        .HasColumnName("Procurement Start Actual");

                    b.Property<int>("TypeOfWork")
                        .HasColumnType("int")
                        .HasColumnName("Type of Work");

                    b.ToTable("Technical_QA", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.TermVisits", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("TermVisitsActionPlan")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Action plan");

                    b.Property<DateTime?>("TermVisitsActionPlanDueDate")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits.Action plan due date");

                    b.Property<string>("TermVisitsActionPlanReceived")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Action plan received");

                    b.Property<DateTime?>("TermVisitsDateOfFollowUp")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits.Date of follow up");

                    b.Property<DateTime?>("TermVisitsDateOfVisit")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits.Date of Visit");

                    b.Property<string>("TermVisitsFollowUpVisitRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Follow-up visit rating");

                    b.Property<string>("TermVisitsIsActionPlanRequested")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Is action plan requested?");

                    b.Property<string>("TermVisitsLinkOfficerFirstTermVisit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Link Officer first term visit");

                    b.Property<string>("TermVisitsLinkOfficerFirstTermVisitOutcome")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Link officer first term visit - outcome");

                    b.Property<string>("TermVisitsLinkOfficerFirstTermVisitOutcomeTypeOfConcern")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Link officer first term visit outcome - type of concern");

                    b.Property<string>("TermVisitsLinkOfficerFirstTermVisitReport")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Link officer first term visit – report");

                    b.Property<string>("TermVisitsNameOfDfEOfficial")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Name of DfE official");

                    b.Property<string>("TermVisitsNameOfEducationAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Name of Education Adviser");

                    b.Property<DateTime?>("TermVisitsNextVisitDate")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits.Next visit date");

                    b.Property<string>("TermVisitsSchoolTermVisit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.School Term Visit");

                    b.Property<string>("TermVisitsVisitFollowUp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Visit follow up");

                    b.Property<string>("TermVisitsVisitRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Visit Rating");

                    b.Property<string>("TermVisitsVisitReport")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits.Visit Report");

                    b.Property<string>("TermVisitsVisitSummary")
                        .HasMaxLength(400)
                        .IsUnicode(false)
                        .HasColumnType("varchar(400)")
                        .HasColumnName("Term Visits.Visit Summary");

                    b.Property<string>("Visits")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.ToTable("Term_Visits", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.TermVisitsUtcs", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<DateTime?>("TermVisitsUtcPostOfstedUtcVisitDateOfVisit")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Date of Visit");

                    b.Property<string>("TermVisitsUtcPostOfstedUtcVisitNameOfDfEOfficial")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Name of DfE official");

                    b.Property<string>("TermVisitsUtcPostOfstedUtcVisitNameOfEducationAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Name of Education Adviser");

                    b.Property<DateTime?>("TermVisitsUtcPostOfstedUtcVisitNextVisitDate")
                        .HasColumnType("date")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Next visit date");

                    b.Property<string>("TermVisitsUtcPostOfstedUtcVisitReportLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Report link");

                    b.Property<string>("TermVisitsUtcPostOfstedUtcVisitSummary")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Summary");

                    b.Property<string>("TermVisitsUtcPostOfstedUtcVisitVisitRating")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits UTC.Post-Ofsted UTC Visit: Visit Rating");

                    b.Property<string>("TermVisitsUtcSchoolTermVisit")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Term Visits UTC.School term Visit");

                    b.ToTable("Term_Visits_UTCs", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Trust", b =>
                {
                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("LeadSponsor")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Lead Sponsor");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("TrustRef")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Trust ref");

                    b.Property<string>("TrustsLeadSponsorId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Trusts.Lead sponsor id");

                    b.Property<string>("TrustsLeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trusts.Lead sponsor name");

                    b.Property<string>("TrustsTrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trusts.Trust name");

                    b.Property<string>("TrustsTrustRef")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("Trusts.Trust ref");

                    b.Property<string>("TrustsTrustType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trusts.Trust type");

                    b.HasKey("Rid");

                    b.ToTable("Trust");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Wfa", b =>
                {
                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("WorksFundingAgreementsWfaId")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Works Funding Agreements.WFA ID");

                    b.Property<DateTime?>("WorksFundingAgreementsWorkFundingAgreementIssuedDate")
                        .HasColumnType("date")
                        .HasColumnName("Works Funding Agreements.Work Funding Agreement issued date");

                    b.Property<string>("WorksFundingAgreementsWorkFundingAgreementTotalValue")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Works Funding Agreements.Work Funding Agreement total value");

                    b.ToTable("WFA", "dbo");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("User", "mfsp");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.Existing.Kpi", b =>
                {
                    b.HasOne("Dfe.ManageFreeSchoolProjects.Data.Entities.User", "User")
                        .WithMany("Projects")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Entities.User", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
