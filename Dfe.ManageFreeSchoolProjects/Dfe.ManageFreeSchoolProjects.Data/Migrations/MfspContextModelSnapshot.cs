// <auto-generated />
using System;
using Dfe.ManageFreeSchoolProjects.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dfe.ManageFreeSchoolProjects.Data.Migrations
{
    [DbContext(typeof(MfspContext))]
    partial class MfspContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dfe.ManageFreeSchoolProjects.Data.Kpi", b =>
                {
                    b.Property<string>("AprilIndicator")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("April Indicator");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeed")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Basic Need.Additional evidence of need");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeedSecondary")
                        .HasMaxLength(999)
                        .IsUnicode(false)
                        .HasColumnType("varchar(999)")
                        .HasColumnName("Basic Need.Additional evidence of need - secondary");

                    b.Property<string>("BasicNeedAdditionalEvidenceOfNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Additional evidence of need - secondary (assessment)");

                    b.Property<string>("BasicNeedKp02PlanningAreaCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.KP02_Planning area code");

                    b.Property<string>("BasicNeedKp04PlanningAreaCode")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.KP04_Planning area code");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaAllYearGroupsInScapYear4")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area (all year groups in SCAP year +4)");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaAllYearGroupsInScapYear4Secondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area (all year groups in SCAP year +4) - secondary");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaYearOfOpeningAllYearGroups")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area — year of opening (all year groups)");

                    b.Property<string>("BasicNeedPercentageShortfallInLocalAreaYearOfOpeningAllYearGroupsSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Percentage shortfall in local area - year of opening (all year groups) - secondary");

                    b.Property<string>("BasicNeedPlanningAreaCodeSecondary")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.Planning area code - secondary");

                    b.Property<string>("BasicNeedPlanningAreaCodeSecondaryAssessment")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)")
                        .HasColumnName("Basic Need.Planning area code - secondary (assessment)");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesInLocalArea")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places in local area");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesInLocalAreaSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places in local area - secondary");

                    b.Property<string>("BasicNeedSchoolInLocalAreaWithAShortfallOfPlacesSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in local area with a shortfall of places - secondary (assessment)");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeed")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need (assessment)");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedSecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need - secondary");

                    b.Property<string>("BasicNeedSchoolInPlanningAreaOfBasicNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.School in planning area of basic need - secondary (assessment)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaAllYearGroupsInScapYear4")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area (all year groups in SCAP year +4)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaAllYearGroupsInScapYear4Secondary")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area (all year groups in SCAP year +4) - secondary");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaYearOfOpeningAllYearGroups")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area — year of opening (all year groups)");

                    b.Property<string>("BasicNeedShortfallOfPlacesInLocalAreaYearOfOpeningAllYearGroupsSecondary")
                        .HasMaxLength(4)
                        .IsUnicode(false)
                        .HasColumnType("varchar(4)")
                        .HasColumnName("Basic Need.Shortfall of places in local area - year of opening (all year groups) - secondary");

                    b.Property<string>("BasicNeedYearOfProjectedNeedSecondaryAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of projected need - secondary (assessment)");

                    b.Property<string>("BasicNeedYearOfScapSurvey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of SCAP survey");

                    b.Property<string>("BasicNeedYearOfScapSurveySecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Basic Need.Year of SCAP survey - secondary");

                    b.Property<string>("CommunicationsArchivedLinesToTake")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Archived lines to take");

                    b.Property<string>("CommunicationsCurrentLinesToTake")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Current lines to take");

                    b.Property<string>("CommunicationsMediaPenPortrait")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Communications.Media pen portrait");

                    b.Property<string>("ContingencyPlanningBackUpField")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.Back-up Field");

                    b.Property<string>("ContingencyPlanningCanCurrentCohortRemainInSchool")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Can current cohort remain in school?");

                    b.Property<string>("ContingencyPlanningCanSchoolTakeOnAnotherCohort")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Can school take on another cohort?");

                    b.Property<string>("ContingencyPlanningCanTempsBeExtended")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.Can temps be extended?");

                    b.Property<string>("ContingencyPlanningEssentialThatItIsDeliveredForSeptemberOrCurrentScheduledDateInTheRealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Essential that it is delivered for September (or current scheduled date) in the Realistic Year of Opening?");

                    b.Property<string>("ContingencyPlanningExtraInformation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.Extra information");

                    b.Property<string>("ContingencyPlanningFscDeliverabilityAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.FSC Deliverability Assessment");

                    b.Property<string>("ContingencyPlanningFscDeliverabilityComment")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Contingency Planning.FSC Deliverability Comment");

                    b.Property<string>("ContingencyPlanningHowLongCanTempsBeExtended")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.How long can temps be extended?");

                    b.Property<string>("ContingencyPlanningHowManyStudentsWillNeedAlternativeArrangements")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("Contingency Planning.How many students will need alternative arrangements?");

                    b.Property<string>("ContingencyPlanningIfOtherWhy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If 'Other', why?");

                    b.Property<string>("ContingencyPlanningIfOtherWhyForRAndAExplainAnythingBeingExploredOrNextSteps")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If 'Other', why? (for R and A, explain anything being explored or next steps)");

                    b.Property<string>("ContingencyPlanningIfYesWhy")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.If ‘Yes’, why?");

                    b.Property<string>("ContingencyPlanningProjectedLengthOfDelayToProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Projected length of delay to project");

                    b.Property<string>("ContingencyPlanningRddRationale")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.RDD Rationale");

                    b.Property<string>("ContingencyPlanningRddSiteContingencyRag")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.RDD Site Contingency RAG");

                    b.Property<string>("ContingencyPlanningSiteShutdown")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Contingency Planning.Site shutdown");

                    b.Property<string>("FsType")
                        .IsRequired()
                        .HasMaxLength(14)
                        .IsUnicode(false)
                        .HasColumnType("varchar(14)")
                        .HasColumnName("FS_Type");

                    b.Property<string>("FsType1")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)")
                        .HasColumnName("FS_Type_1");

                    b.Property<string>("KeyContactsAddressOfLeadProposer")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Key Contacts.Address of lead proposer");

                    b.Property<string>("KeyContactsAllocatedLawFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Allocated law firm");

                    b.Property<string>("KeyContactsAssessmentTeamLeader")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Assessment team leader");

                    b.Property<string>("KeyContactsChairOfGovernorsEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors email");

                    b.Property<string>("KeyContactsChairOfGovernorsMat")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT");

                    b.Property<string>("KeyContactsChairOfGovernorsMatEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT email");

                    b.Property<string>("KeyContactsChairOfGovernorsMatPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of governors MAT phone");

                    b.Property<string>("KeyContactsChairOfGovernorsName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors name");

                    b.Property<string>("KeyContactsChairOfGovernorsPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Chair of Governors phone");

                    b.Property<string>("KeyContactsCommercialManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Commercial Manager");

                    b.Property<string>("KeyContactsEaOnceSchoolIsOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.EA once school is open");

                    b.Property<string>("KeyContactsEducationAdviserAssessment")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Education adviser (assessment)");

                    b.Property<string>("KeyContactsEducationAdviserPreOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Education adviser (pre-opening)");

                    b.Property<string>("KeyContactsEsfaAcademiesSeniorAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA academies senior adviser");

                    b.Property<string>("KeyContactsEsfaCapitalHeadOfRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital Head of Region");

                    b.Property<string>("KeyContactsEsfaCapitalProjectDirector")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project director");

                    b.Property<string>("KeyContactsEsfaCapitalProjectManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project manager");

                    b.Property<string>("KeyContactsEsfaCapitalProjectManagerFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Capital project manager firm");

                    b.Property<string>("KeyContactsEsfaLinkOfficer")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA Link Officer");

                    b.Property<string>("KeyContactsEsfaPropertyLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA property lead");

                    b.Property<string>("KeyContactsEsfaRegionalPropertyLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA regional property lead");

                    b.Property<string>("KeyContactsEsfaTechnicalAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ESFA technical adviser");

                    b.Property<string>("KeyContactsFrameworkPlanningConsultant")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning consultant");

                    b.Property<string>("KeyContactsFrameworkPlanningFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning firm");

                    b.Property<string>("KeyContactsFrameworkPlanningFirmOther")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Framework planning firm – other");

                    b.Property<string>("KeyContactsFsgAssessmentLead")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG assessment lead");

                    b.Property<string>("KeyContactsFsgGrade6")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG Grade 6");

                    b.Property<string>("KeyContactsFsgLeadContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG lead contact");

                    b.Property<string>("KeyContactsFsgTeamLeader")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.FSG team leader");

                    b.Property<string>("KeyContactsIctAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.ICT adviser");

                    b.Property<string>("KeyContactsInterviewChair")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Interview chair");

                    b.Property<string>("KeyContactsLeadProposerEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer email ");

                    b.Property<string>("KeyContactsLeadProposerName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer name");

                    b.Property<string>("KeyContactsLeadProposerPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Lead proposer phone");

                    b.Property<string>("KeyContactsLegalFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Legal firm");

                    b.Property<string>("KeyContactsLegalManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Legal manager");

                    b.Property<string>("KeyContactsLocalAuthorityContactPresumptionProject")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Local authority contact (presumption project)");

                    b.Property<string>("KeyContactsLocatEdAcquisitionManager")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.LocatED acquisition manager");

                    b.Property<string>("KeyContactsNamedContactOnceSchoolIsOpen")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Named contact once school is open");

                    b.Property<string>("KeyContactsPlanningAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Planning Adviser");

                    b.Property<string>("KeyContactsPostCodeForMapping")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.PostCode for Mapping");

                    b.Property<string>("KeyContactsPostcode")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Postcode");

                    b.Property<string>("KeyContactsPrincipalDesignateEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate email");

                    b.Property<string>("KeyContactsPrincipalDesignateName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate Name");

                    b.Property<string>("KeyContactsPrincipalDesignatePhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Principal Designate phone");

                    b.Property<string>("KeyContactsPropertyAdviserAllocated")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property adviser allocated");

                    b.Property<string>("KeyContactsPropertyDocumentRepositoryLink")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property document repository link");

                    b.Property<string>("KeyContactsPropertyFirmDealing")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Property firm dealing");

                    b.Property<string>("KeyContactsSchoolAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Key Contacts.School address");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader email");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader name");

                    b.Property<string>("KeyContactsSeniorExecutiveLeaderPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Senior Executive Leader phone");

                    b.Property<string>("KeyContactsStrategicDesignAdviser")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Strategic design adviser");

                    b.Property<string>("KeyContactsTechnicalAdvisoryFirm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Technical advisory firm");

                    b.Property<string>("KeyContactsTrustSIctLeadContact")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact");

                    b.Property<string>("KeyContactsTrustSIctLeadContactEmail")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact email");

                    b.Property<string>("KeyContactsTrustSIctLeadContactPhone")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Key Contacts.Trust's ICT lead contact phone");

                    b.Property<string>("LeadSponsorId")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Lead sponsor ID");

                    b.Property<string>("LeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Lead sponsor name");

                    b.Property<string>("LocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Local authority");

                    b.Property<string>("MatUnitProjects")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)")
                        .HasColumnName("MAT Unit Projects");

                    b.Property<string>("PRid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("p_rid");

                    b.Property<DateTime?>("ProjectStatusActualDateOfOpeningInPermanentAccommodation")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual date of opening in permanent accommodation");

                    b.Property<DateTime?>("ProjectStatusActualDateOfOpeningInTemporaryAccommodation")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual date of opening in temporary accommodation");

                    b.Property<DateTime?>("ProjectStatusActualOpeningDate")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Actual opening date");

                    b.Property<string>("ProjectStatusCommentaryForCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for cancellation");

                    b.Property<string>("ProjectStatusCommentaryForFirstDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for first deferral");

                    b.Property<string>("ProjectStatusCommentaryForSecondDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for second deferral");

                    b.Property<string>("ProjectStatusCommentaryForThirdDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for third deferral");

                    b.Property<string>("ProjectStatusCommentaryForWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Commentary for withdrawal");

                    b.Property<string>("ProjectStatusCurrentFreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Current free school name");

                    b.Property<DateTime?>("ProjectStatusDateCancelled")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date cancelled");

                    b.Property<DateTime?>("ProjectStatusDateClosed")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date closed");

                    b.Property<DateTime?>("ProjectStatusDateOfApplicationIfOutsideWave")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of application if outside wave");

                    b.Property<DateTime?>("ProjectStatusDateOfEntryIntoPreOpening")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of entry into pre-opening");

                    b.Property<DateTime?>("ProjectStatusDateOfFirstDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of first deferral");

                    b.Property<DateTime?>("ProjectStatusDateOfSecondDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of second deferral");

                    b.Property<DateTime?>("ProjectStatusDateOfThirdDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date of third deferral");

                    b.Property<DateTime?>("ProjectStatusDateWithdrawn")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Date withdrawn");

                    b.Property<string>("ProjectStatusFreeSchoolApplicationWave")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Free school application wave");

                    b.Property<string>("ProjectStatusFreeSchoolPenPortrait")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Project Status.Free school pen portrait");

                    b.Property<string>("ProjectStatusFreeSchoolsApplicationNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Project Status.Free schools application number");

                    b.Property<string>("ProjectStatusHasProjectBeenCancelled")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been cancelled?");

                    b.Property<string>("ProjectStatusHasProjectBeenDeferredForASecondTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been deferred for a second time?");

                    b.Property<string>("ProjectStatusHasProjectBeenDeferredForAThirdTime")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been deferred for a third time?");

                    b.Property<string>("ProjectStatusHasProjectBeenWithdrawn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has project been withdrawn?");

                    b.Property<string>("ProjectStatusHasTheFreeSchoolChangedItsName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has the free school changed its name?");

                    b.Property<string>("ProjectStatusHasTheProjectBeenDeferred")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Has the project been deferred?");

                    b.Property<string>("ProjectStatusKp05ReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.KP05_Reason for site deferral");

                    b.Property<string>("ProjectStatusKp06ReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.KP06_Reason for site deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingFirstDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following first deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingSecondDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following second deferral");

                    b.Property<DateTime?>("ProjectStatusNewOpeningDateFollowingThirdDeferral")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.New opening date following third deferral");

                    b.Property<DateTime?>("ProjectStatusPlannedMoveDateToPermanentSite")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Planned move date to permanent site");

                    b.Property<string>("ProjectStatusPreviousFreeSchoolName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Previous free school name");

                    b.Property<string>("ProjectStatusPrimaryReasonForCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for cancellation");

                    b.Property<string>("ProjectStatusPrimaryReasonForFirstDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for first deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForSecondDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for second deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForThirdDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for third deferral");

                    b.Property<string>("ProjectStatusPrimaryReasonForWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Primary reason for withdrawal");

                    b.Property<string>("ProjectStatusProjectId")
                        .HasMaxLength(25)
                        .IsUnicode(false)
                        .HasColumnType("varchar(25)")
                        .HasColumnName("Project Status.Project ID");

                    b.Property<string>("ProjectStatusProjectStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Project status");

                    b.Property<DateTime?>("ProjectStatusProvisionalOpeningDateAgreedWithTrust")
                        .HasColumnType("date")
                        .HasColumnName("Project Status.Provisional opening date agreed with trust");

                    b.Property<string>("ProjectStatusRealisticYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Realistic year of opening");

                    b.Property<string>("ProjectStatusReasonForSiteCancellation")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site cancellation");

                    b.Property<string>("ProjectStatusReasonForSiteDeferral")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site deferral");

                    b.Property<string>("ProjectStatusReasonForSiteWithdrawal")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Reason for site withdrawal");

                    b.Property<string>("ProjectStatusRebrokeredUrn")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Rebrokered URN");

                    b.Property<string>("ProjectStatusTrustsPreferredYearOfOpening")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.Trusts preferred year of opening");

                    b.Property<string>("ProjectStatusUrnWhenGivenOne")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Project Status.URN (when given one)");

                    b.Property<DateTime?>("RatProvisionalOpeningDateAgreedWithTrust")
                        .HasColumnType("date")
                        .HasColumnName("RAT Provisional opening date agreed with trust");

                    b.Property<string>("Rid")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("RID");

                    b.Property<string>("RyooWd")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("RYOO_WD");

                    b.Property<string>("SchoolDetailsAeaCatagory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.AEA Catagory");

                    b.Property<string>("SchoolDetailsAgeRange")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Age range");

                    b.Property<string>("SchoolDetailsConstituency")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Constituency");

                    b.Property<string>("SchoolDetailsConstituencyMp")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Constituency MP");

                    b.Property<string>("SchoolDetailsDeprivationDecline")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Deprivation decline");

                    b.Property<string>("SchoolDetailsDetailsOfResidentialBoardingProvision")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("School Details.Details of residential/boarding provision");

                    b.Property<string>("SchoolDetailsDistinguishingFeatures")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("School Details.Distinguishing features");

                    b.Property<string>("SchoolDetailsDistrict")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.District");

                    b.Property<string>("SchoolDetailsEfaTerritory")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.EFA Territory");

                    b.Property<string>("SchoolDetailsEmployerPartners")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Employer Partners");

                    b.Property<string>("SchoolDetailsEmployerSponsorsUtcsSsOnly")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Employer sponsors - UTCs/SS only");

                    b.Property<string>("SchoolDetailsFaithStatus")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Faith status");

                    b.Property<string>("SchoolDetailsFaithType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Faith type");

                    b.Property<string>("SchoolDetailsGender")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Gender");

                    b.Property<string>("SchoolDetailsGeographicalRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Geographical Region");

                    b.Property<string>("SchoolDetailsIndependentConverter")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Independent converter");

                    b.Property<string>("SchoolDetailsLaestabWhenGivenOne")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.LAESTAB (when given one)");

                    b.Property<string>("SchoolDetailsLeadSponsorId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("School Details.Lead sponsor ID");

                    b.Property<string>("SchoolDetailsLeadSponsorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Lead sponsor name");

                    b.Property<string>("SchoolDetailsLocalAuthority")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Local authority");

                    b.Property<string>("SchoolDetailsLocalAuthorityControl")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Local authority control");

                    b.Property<string>("SchoolDetailsNeetInLa")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.% NEET in LA");

                    b.Property<string>("SchoolDetailsNumberOfFormsOfEntry")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Number of forms of entry");

                    b.Property<string>("SchoolDetailsNursery")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Nursery");

                    b.Property<string>("SchoolDetailsOtherPartners")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Other Partners");

                    b.Property<string>("SchoolDetailsPleaseSpecifyOtherFaithType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Please specify other faith type");

                    b.Property<string>("SchoolDetailsPleaseSpecifyOtherTypeOfProposerGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Please specify other type of proposer group");

                    b.Property<string>("SchoolDetailsPoliticalParty")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Political party");

                    b.Property<string>("SchoolDetailsResidentialOrBoardingProvision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Residential or boarding provision");

                    b.Property<string>("SchoolDetailsRscRegion")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.RSC region");

                    b.Property<string>("SchoolDetailsSchoolPhasePrimarySecondary")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.School phase (primary, secondary)");

                    b.Property<string>("SchoolDetailsSchoolTypeMainstreamApEtc")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.School type (mainstream, AP etc)");

                    b.Property<string>("SchoolDetailsSixthForm")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sixth form");

                    b.Property<string>("SchoolDetailsSixthFormType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sixth form type");

                    b.Property<string>("SchoolDetailsSizeOfGoverningBody")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2)")
                        .HasColumnName("School Details.Size of Governing Body");

                    b.Property<string>("SchoolDetailsSpecialism")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Specialism");

                    b.Property<string>("SchoolDetailsSpecialistResourceProvision")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Specialist Resource Provision");

                    b.Property<string>("SchoolDetailsSponsorType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Sponsor type");

                    b.Property<DateTime?>("SchoolDetailsStartOfTermDate")
                        .HasColumnType("date")
                        .HasColumnName("School Details.Start of term date");

                    b.Property<string>("SchoolDetailsTrustId")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("varchar(5)")
                        .HasColumnName("School Details.Trust ID");

                    b.Property<string>("SchoolDetailsTrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Trust name");

                    b.Property<string>("SchoolDetailsTrustType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Trust type");

                    b.Property<string>("SchoolDetailsTypeOfProposerGroup")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.Type of proposer group");

                    b.Property<string>("SchoolDetailsUniversitySponsor")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("School Details.University Sponsor");

                    b.Property<string>("SponsorUnitProjects")
                        .IsRequired()
                        .HasMaxLength(39)
                        .IsUnicode(false)
                        .HasColumnType("varchar(39)")
                        .HasColumnName("Sponsor Unit Projects");

                    b.Property<string>("TrustId")
                        .HasMaxLength(7)
                        .IsUnicode(false)
                        .HasColumnType("varchar(7)")
                        .HasColumnName("Trust ID");

                    b.Property<string>("TrustName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trust name");

                    b.Property<string>("TrustType")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Trust type");

                    b.Property<string>("UpperStatus")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("Upper Status");

                    b.Property<string>("Wave")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.ToTable("KPI", (string)null);
                });
#pragma warning restore 612, 618
        }
    }
}
