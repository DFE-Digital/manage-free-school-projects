@page "/projects/{projectId}/tasks/trust/search/{handler?}"
@using Dfe.ManageFreeSchoolProjects.Constants;
@*@using NetEscapades.AspNetCore.SecurityHeaders;*@
@model Dfe.ManageFreeSchoolProjects.Pages.Project.Tasks.Trust.SearchTrustTaskModel
@{
    ViewData["Title"] = $"Search for a trust - {Model.CurrentFreeSchoolName}";
    var backlink = string.Format(RouteConstants.ViewTrustTask, Model.ProjectId);
    //Model.Nonce = HttpContext.GetNonce();
}

@section BeforeMain {
    <div role="navigation" class="govuk-width-container">
        <a href=@backlink class="govuk-back-link">Back</a>
    </div>
}


<partial name="_ErrorSummary" />

<h1 class="govuk-heading-xl">
    <span class="govuk-caption-l">@Model.CurrentFreeSchoolName</span>
    Search for a trust by TRN
</h1>

<div class="govuk-grid-row">
    <div class="govuk-grid-column-two-thirds">
        <form method="post">
            <govuk-text-input id="trn" name="trn" asp-for="@Model.TRN" data-testid="trust-reference-number" label="TRN (Trust reference number)" hint="For example, TR00036" />
            <button class="govuk-button" data-module="govuk-button">
                Continue
            </button>
        </form>

    </div>
</div>

@*<script type="application/javascript" nonce="@Model.Nonce">
        $(document).ready(function () {



             $(document).ajaxStart(function() {
                showLoader();
            })
             $(document).ajaxStop(function() {
                hideLoader();
            })

            const autocompleteContainer = document.getElementById("container-SelectedTrn");
            const trustSearchDelay = 1000;
            let trustSearchResults = undefined;
            let selectedTrn = undefined;
            let xhr = undefined;
            let timeout = undefined;

            function generateNonce(length) {
                var text = "";
                var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
                for(var i = 0; i < length; i++) {
                    text += possible.charAt(Math.floor(Math.random() * possible.length));
                }
                return text;
            }

            function cancelSearch() {
                clearTimeout(timeout);
                if (xhr !== undefined) {
                    xhr.abort();
                }
                xhr = undefined;
                trustSearchResults = undefined;
                selectedTrn = undefined;
                console.log("cancelledSearch");
            }

            function searchForTrusts(searchTerm, populateResults) {

                cancelSearch();

                var requestIfNotCancelled = () => {

                     console.log("Searching for results");

                    // use trust page for searching

                    xhr = $.get("search/TrustsSearchResult", { searchTerm: searchTerm, nonce:generateNonce(20) })
                        .done(function (response) {

                            console.log(JSON.stringify(response));

                            let nonce = response.nonce;
                            let trusts = response.data;

                            if (trusts !== undefined) {
                                trustSearchResults = trusts;
                                populateResults(trusts.map(x => x.trust.trn));

                                console.log(JSON.stringify(trusts));
                            }
                            else {
                                trustSearchResults = undefined;
                                populateResults();
                            }
                        })
                        .always(function() {
                            xhr = undefined;
                        });
                };

                timeout = setTimeout(requestIfNotCancelled, trustSearchDelay);
            }

            accessibleAutocomplete({
                element: autocompleteContainer,
                id: "search",
                name: "trustSearch",
                source: searchForTrusts,
                confirmOnBlur: false,
                autoselect: true,
                minLength: 3,
                showNoOptonsFound: true,
                onConfirm: (selected) => {
                    selectedTrustTrn = trustSearchResults === undefined ? undefined : trustSearchResults.find(trust => trust.trust.trn === selected).trust.trn;
                    $('#selectedTrustTrn').val(selectedTrustTrn);
                }
            });
        });

    </script>*@